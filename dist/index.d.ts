// Generated by dts-bundle-generator v8.1.2

import { z } from 'zod';

export declare const NAME_MAX = 100;
export declare const PASSWORD_MIN = 6;
export declare const PASSWORD_MAX = 2000;
export declare const ABILITY_MAX = 7000;
export declare const ABILITY_PREREQ_MAX = 200;
export declare const ITEM_MAX = 2000;
export declare const COMMENT_MAX = 2000;
export declare const CHANGELOG_MAX = 200;
export declare const ATTRIBUTE_MIN = -15;
export declare const ATTRIBUTE_MAX = 15;
export declare const ENTITY_TEXT_MAX = 10000;
export declare const ENTITY_FLUX_MAX = 500;
export declare const CHAT_MAX = 1000;
export declare const ATTRIBUTES: readonly [
	"per",
	"tek",
	"agi",
	"dex",
	"int",
	"spi",
	"str",
	"wis",
	"cha"
];
export declare const CHARACTER_GIFTS: readonly [
	"Alertness",
	"Craft",
	"Alacrity",
	"Finesse",
	"Mind",
	"Magic",
	"Rage",
	"Science",
	"Charm",
	"None"
];
export declare const ATTRIBUTES_SET: Set<string>;
export declare const idValidator: z.ZodString;
export declare const optionalIdValidator: z.ZodOptional<z.ZodString>;
export declare const nameValidator: z.ZodString;
export declare const equationValidator: z.ZodUnion<[
	z.ZodNumber,
	z.ZodString
]>;
export type Equation = z.infer<typeof equationValidator>;
export declare const RED_HIGHLIGHT = "red";
export declare const DARK_RED_HIGHLIGHT = "dark_red";
export declare const ORANGE_HIGHLIGHT = "orange";
export declare const DARK_ORANGE_HIGHLIGHT = "dark_orange";
export declare const GREEN_HIGHLIGHT = "green";
export declare const DARK_GREEN_HIGHLIGHT = "dark_green";
export declare const BLUE_HIGHLIGHT = "blue";
export declare const DARK_BLUE_HIGHLIGHT = "dark_blue";
export declare const GRAY_HIGHLIGHT = "gray";
export declare const DARK_GRAY_HIGHLIGHT = "dark_gray";
export declare const HIGHLIGHT_COLORS: readonly [
	"red",
	"dark_red",
	"orange",
	"dark_orange",
	"green",
	"dark_green",
	"blue",
	"dark_blue",
	"gray",
	"dark_gray"
];
export declare const highlightValidator: z.ZodEnum<[
	"red",
	"dark_red",
	"orange",
	"dark_orange",
	"green",
	"dark_green",
	"blue",
	"dark_blue",
	"gray",
	"dark_gray"
]>;
export type HighlightColor = z.infer<typeof highlightValidator>;
export declare const diceOtherTogglesValidator: z.ZodRecord<z.ZodString, z.ZodObject<{
	toggled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
	toggled: boolean;
}, {
	toggled: boolean;
}>>;
export declare const diceSettingsValidator: z.ZodObject<{
	explodes: z.ZodOptional<z.ZodBoolean>;
	rr1s: z.ZodOptional<z.ZodBoolean>;
	drop: z.ZodOptional<z.ZodNumber>;
	fatigued: z.ZodOptional<z.ZodBoolean>;
	end: z.ZodOptional<z.ZodString>;
	flow: z.ZodOptional<z.ZodNumber>;
	ebb: z.ZodOptional<z.ZodNumber>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
	otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
		toggled: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		toggled: boolean;
	}, {
		toggled: boolean;
	}>>>;
	adjust: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
	count: z.ZodOptional<z.ZodNumber>;
	sides: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	explodes?: boolean | undefined;
	rr1s?: boolean | undefined;
	drop?: number | undefined;
	fatigued?: boolean | undefined;
	end?: string | undefined;
	flow?: number | undefined;
	ebb?: number | undefined;
	heroic_creativity_bonus?: number | undefined;
	otherToggles?: Record<string, {
		toggled: boolean;
	}> | undefined;
	adjust?: string | number | undefined;
	count?: number | undefined;
	sides?: number | undefined;
}, {
	explodes?: boolean | undefined;
	rr1s?: boolean | undefined;
	drop?: number | undefined;
	fatigued?: boolean | undefined;
	end?: string | undefined;
	flow?: number | undefined;
	ebb?: number | undefined;
	heroic_creativity_bonus?: number | undefined;
	otherToggles?: Record<string, {
		toggled: boolean;
	}> | undefined;
	adjust?: string | number | undefined;
	count?: number | undefined;
	sides?: number | undefined;
}>;
export type DiceOtherToggles = z.infer<typeof diceOtherTogglesValidator>;
export type DiceSettings = z.infer<typeof diceSettingsValidator>;
export declare const attributeValidator: z.ZodDefault<z.ZodNumber>;
export declare const combatStatValidator: z.ZodNumber;
export declare const baseAttributeFieldValidator: z.ZodEnum<[
	"per",
	"tek",
	"agi",
	"dex",
	"int",
	"spi",
	"str",
	"wis",
	"cha"
]>;
export declare const builtInAttributesValidator: z.ZodObject<{
	agi: z.ZodDefault<z.ZodNumber>;
	cha: z.ZodDefault<z.ZodNumber>;
	dex: z.ZodDefault<z.ZodNumber>;
	int: z.ZodDefault<z.ZodNumber>;
	per: z.ZodDefault<z.ZodNumber>;
	spi: z.ZodDefault<z.ZodNumber>;
	str: z.ZodDefault<z.ZodNumber>;
	tek: z.ZodDefault<z.ZodNumber>;
	wis: z.ZodDefault<z.ZodNumber>;
	hp: z.ZodNumber;
	max_hp: z.ZodNumber;
	mp: z.ZodNumber;
	max_mp: z.ZodNumber;
	vim: z.ZodNumber;
	max_vim: z.ZodNumber;
	hero: z.ZodOptional<z.ZodNumber>;
	max_hero: z.ZodOptional<z.ZodNumber>;
	init: z.ZodNumber;
	speed: z.ZodNumber;
	xp: z.ZodOptional<z.ZodNumber>;
	sp: z.ZodOptional<z.ZodNumber>;
	armor: z.ZodOptional<z.ZodNumber>;
	burden: z.ZodOptional<z.ZodNumber>;
	casting: z.ZodOptional<z.ZodNumber>;
	l: z.ZodOptional<z.ZodNumber>;
	radius: z.ZodOptional<z.ZodNumber>;
	reach: z.ZodOptional<z.ZodNumber>;
	shield: z.ZodOptional<z.ZodNumber>;
	bluespace: z.ZodOptional<z.ZodNumber>;
	trii: z.ZodOptional<z.ZodNumber>;
	max_trii: z.ZodOptional<z.ZodNumber>;
	free_hands: z.ZodOptional<z.ZodNumber>;
	carrying_capacity: z.ZodOptional<z.ZodNumber>;
	alerts: z.ZodOptional<z.ZodNumber>;
	max_alerts: z.ZodOptional<z.ZodNumber>;
	recovery_shock: z.ZodOptional<z.ZodNumber>;
	acc: z.ZodOptional<z.ZodNumber>;
	dmg: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
	actions_on_turn: z.ZodOptional<z.ZodNumber>;
	reactions_on_turn: z.ZodOptional<z.ZodNumber>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
	aggressive_acc: z.ZodOptional<z.ZodNumber>;
	aggressive_dmg: z.ZodOptional<z.ZodNumber>;
	arcane_acc: z.ZodOptional<z.ZodNumber>;
	arcane_dmg: z.ZodOptional<z.ZodNumber>;
	balanced_acc: z.ZodOptional<z.ZodNumber>;
	balanced_dmg: z.ZodOptional<z.ZodNumber>;
	blade_acc: z.ZodOptional<z.ZodNumber>;
	blade_dmg: z.ZodOptional<z.ZodNumber>;
	bow_acc: z.ZodOptional<z.ZodNumber>;
	bow_dmg: z.ZodOptional<z.ZodNumber>;
	brawling_acc: z.ZodOptional<z.ZodNumber>;
	brawling_dmg: z.ZodOptional<z.ZodNumber>;
	brutal_acc: z.ZodOptional<z.ZodNumber>;
	brutal_dmg: z.ZodOptional<z.ZodNumber>;
	cannon_acc: z.ZodOptional<z.ZodNumber>;
	cannon_dmg: z.ZodOptional<z.ZodNumber>;
	great_acc: z.ZodOptional<z.ZodNumber>;
	great_dmg: z.ZodOptional<z.ZodNumber>;
	grenade_acc: z.ZodOptional<z.ZodNumber>;
	grenade_dmg: z.ZodOptional<z.ZodNumber>;
	hookwhip_acc: z.ZodOptional<z.ZodNumber>;
	hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
	improvised_acc: z.ZodOptional<z.ZodNumber>;
	improvised_dmg: z.ZodOptional<z.ZodNumber>;
	polearm_acc: z.ZodOptional<z.ZodNumber>;
	polearm_dmg: z.ZodOptional<z.ZodNumber>;
	protector_acc: z.ZodOptional<z.ZodNumber>;
	protector_dmg: z.ZodOptional<z.ZodNumber>;
	rifle_acc: z.ZodOptional<z.ZodNumber>;
	rifle_dmg: z.ZodOptional<z.ZodNumber>;
	shotgun_acc: z.ZodOptional<z.ZodNumber>;
	shotgun_dmg: z.ZodOptional<z.ZodNumber>;
	sidearm_acc: z.ZodOptional<z.ZodNumber>;
	sidearm_dmg: z.ZodOptional<z.ZodNumber>;
	thrown_acc: z.ZodOptional<z.ZodNumber>;
	thrown_dmg: z.ZodOptional<z.ZodNumber>;
	tinkertech_acc: z.ZodOptional<z.ZodNumber>;
	tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
	unarmed_acc: z.ZodOptional<z.ZodNumber>;
	unarmed_dmg: z.ZodOptional<z.ZodNumber>;
	whip_acc: z.ZodOptional<z.ZodNumber>;
	whip_dmg: z.ZodOptional<z.ZodNumber>;
	fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
	vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
	stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
	attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
	magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burning: z.ZodOptional<z.ZodNumber>;
	bleeding: z.ZodOptional<z.ZodNumber>;
	paralysis: z.ZodOptional<z.ZodNumber>;
	stun: z.ZodOptional<z.ZodNumber>;
	agi_dmg: z.ZodOptional<z.ZodNumber>;
	cha_dmg: z.ZodOptional<z.ZodNumber>;
	dex_dmg: z.ZodOptional<z.ZodNumber>;
	int_dmg: z.ZodOptional<z.ZodNumber>;
	per_dmg: z.ZodOptional<z.ZodNumber>;
	spi_dmg: z.ZodOptional<z.ZodNumber>;
	str_dmg: z.ZodOptional<z.ZodNumber>;
	tek_dmg: z.ZodOptional<z.ZodNumber>;
	wis_dmg: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	per: number;
	tek: number;
	agi: number;
	dex: number;
	int: number;
	spi: number;
	str: number;
	wis: number;
	cha: number;
	hp: number;
	max_hp: number;
	mp: number;
	max_mp: number;
	vim: number;
	max_vim: number;
	init: number;
	speed: number;
	hero?: number | undefined;
	max_hero?: number | undefined;
	xp?: number | undefined;
	sp?: number | undefined;
	armor?: number | undefined;
	burden?: number | undefined;
	casting?: number | undefined;
	l?: number | undefined;
	radius?: number | undefined;
	reach?: number | undefined;
	shield?: number | undefined;
	bluespace?: number | undefined;
	trii?: number | undefined;
	max_trii?: number | undefined;
	free_hands?: number | undefined;
	carrying_capacity?: number | undefined;
	alerts?: number | undefined;
	max_alerts?: number | undefined;
	recovery_shock?: number | undefined;
	acc?: number | undefined;
	dmg?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
	actions_on_turn?: number | undefined;
	reactions_on_turn?: number | undefined;
	heroic_creativity_bonus?: number | undefined;
	aggressive_acc?: number | undefined;
	aggressive_dmg?: number | undefined;
	arcane_acc?: number | undefined;
	arcane_dmg?: number | undefined;
	balanced_acc?: number | undefined;
	balanced_dmg?: number | undefined;
	blade_acc?: number | undefined;
	blade_dmg?: number | undefined;
	bow_acc?: number | undefined;
	bow_dmg?: number | undefined;
	brawling_acc?: number | undefined;
	brawling_dmg?: number | undefined;
	brutal_acc?: number | undefined;
	brutal_dmg?: number | undefined;
	cannon_acc?: number | undefined;
	cannon_dmg?: number | undefined;
	great_acc?: number | undefined;
	great_dmg?: number | undefined;
	grenade_acc?: number | undefined;
	grenade_dmg?: number | undefined;
	hookwhip_acc?: number | undefined;
	hookwhip_dmg?: number | undefined;
	improvised_acc?: number | undefined;
	improvised_dmg?: number | undefined;
	polearm_acc?: number | undefined;
	polearm_dmg?: number | undefined;
	protector_acc?: number | undefined;
	protector_dmg?: number | undefined;
	rifle_acc?: number | undefined;
	rifle_dmg?: number | undefined;
	shotgun_acc?: number | undefined;
	shotgun_dmg?: number | undefined;
	sidearm_acc?: number | undefined;
	sidearm_dmg?: number | undefined;
	thrown_acc?: number | undefined;
	thrown_dmg?: number | undefined;
	tinkertech_acc?: number | undefined;
	tinkertech_dmg?: number | undefined;
	unarmed_acc?: number | undefined;
	unarmed_dmg?: number | undefined;
	whip_acc?: number | undefined;
	whip_dmg?: number | undefined;
	fall_damage_resistance?: number | undefined;
	vim_damage_resistance?: number | undefined;
	burn_damage_resistance?: number | undefined;
	bleed_damage_resistance?: number | undefined;
	stun_damage_resistance?: number | undefined;
	paralysis_damage_resistance?: number | undefined;
	attribute_damage_resistance?: number | undefined;
	galvanic_damage_resistance?: number | undefined;
	magical_damage_resistance?: number | undefined;
	physical_damage_resistance?: number | undefined;
	piercing_damage_resistance?: number | undefined;
	slashing_damage_resistance?: number | undefined;
	bludgeoning_damage_resistance?: number | undefined;
	burning?: number | undefined;
	bleeding?: number | undefined;
	paralysis?: number | undefined;
	stun?: number | undefined;
	agi_dmg?: number | undefined;
	cha_dmg?: number | undefined;
	dex_dmg?: number | undefined;
	int_dmg?: number | undefined;
	per_dmg?: number | undefined;
	spi_dmg?: number | undefined;
	str_dmg?: number | undefined;
	tek_dmg?: number | undefined;
	wis_dmg?: number | undefined;
}, {
	hp: number;
	max_hp: number;
	mp: number;
	max_mp: number;
	vim: number;
	max_vim: number;
	init: number;
	speed: number;
	agi?: number | undefined;
	cha?: number | undefined;
	dex?: number | undefined;
	int?: number | undefined;
	per?: number | undefined;
	spi?: number | undefined;
	str?: number | undefined;
	tek?: number | undefined;
	wis?: number | undefined;
	hero?: number | undefined;
	max_hero?: number | undefined;
	xp?: number | undefined;
	sp?: number | undefined;
	armor?: number | undefined;
	burden?: number | undefined;
	casting?: number | undefined;
	l?: number | undefined;
	radius?: number | undefined;
	reach?: number | undefined;
	shield?: number | undefined;
	bluespace?: number | undefined;
	trii?: number | undefined;
	max_trii?: number | undefined;
	free_hands?: number | undefined;
	carrying_capacity?: number | undefined;
	alerts?: number | undefined;
	max_alerts?: number | undefined;
	recovery_shock?: number | undefined;
	acc?: number | undefined;
	dmg?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
	actions_on_turn?: number | undefined;
	reactions_on_turn?: number | undefined;
	heroic_creativity_bonus?: number | undefined;
	aggressive_acc?: number | undefined;
	aggressive_dmg?: number | undefined;
	arcane_acc?: number | undefined;
	arcane_dmg?: number | undefined;
	balanced_acc?: number | undefined;
	balanced_dmg?: number | undefined;
	blade_acc?: number | undefined;
	blade_dmg?: number | undefined;
	bow_acc?: number | undefined;
	bow_dmg?: number | undefined;
	brawling_acc?: number | undefined;
	brawling_dmg?: number | undefined;
	brutal_acc?: number | undefined;
	brutal_dmg?: number | undefined;
	cannon_acc?: number | undefined;
	cannon_dmg?: number | undefined;
	great_acc?: number | undefined;
	great_dmg?: number | undefined;
	grenade_acc?: number | undefined;
	grenade_dmg?: number | undefined;
	hookwhip_acc?: number | undefined;
	hookwhip_dmg?: number | undefined;
	improvised_acc?: number | undefined;
	improvised_dmg?: number | undefined;
	polearm_acc?: number | undefined;
	polearm_dmg?: number | undefined;
	protector_acc?: number | undefined;
	protector_dmg?: number | undefined;
	rifle_acc?: number | undefined;
	rifle_dmg?: number | undefined;
	shotgun_acc?: number | undefined;
	shotgun_dmg?: number | undefined;
	sidearm_acc?: number | undefined;
	sidearm_dmg?: number | undefined;
	thrown_acc?: number | undefined;
	thrown_dmg?: number | undefined;
	tinkertech_acc?: number | undefined;
	tinkertech_dmg?: number | undefined;
	unarmed_acc?: number | undefined;
	unarmed_dmg?: number | undefined;
	whip_acc?: number | undefined;
	whip_dmg?: number | undefined;
	fall_damage_resistance?: number | undefined;
	vim_damage_resistance?: number | undefined;
	burn_damage_resistance?: number | undefined;
	bleed_damage_resistance?: number | undefined;
	stun_damage_resistance?: number | undefined;
	paralysis_damage_resistance?: number | undefined;
	attribute_damage_resistance?: number | undefined;
	galvanic_damage_resistance?: number | undefined;
	magical_damage_resistance?: number | undefined;
	physical_damage_resistance?: number | undefined;
	piercing_damage_resistance?: number | undefined;
	slashing_damage_resistance?: number | undefined;
	bludgeoning_damage_resistance?: number | undefined;
	burning?: number | undefined;
	bleeding?: number | undefined;
	paralysis?: number | undefined;
	stun?: number | undefined;
	agi_dmg?: number | undefined;
	cha_dmg?: number | undefined;
	dex_dmg?: number | undefined;
	int_dmg?: number | undefined;
	per_dmg?: number | undefined;
	spi_dmg?: number | undefined;
	str_dmg?: number | undefined;
	tek_dmg?: number | undefined;
	wis_dmg?: number | undefined;
}>;
export declare const attributeNameValidator: z.ZodString;
export declare const attributeValValidator: z.ZodNumber;
export declare const attributesValidator: z.ZodObject<{
	agi: z.ZodDefault<z.ZodNumber>;
	cha: z.ZodDefault<z.ZodNumber>;
	dex: z.ZodDefault<z.ZodNumber>;
	int: z.ZodDefault<z.ZodNumber>;
	per: z.ZodDefault<z.ZodNumber>;
	spi: z.ZodDefault<z.ZodNumber>;
	str: z.ZodDefault<z.ZodNumber>;
	tek: z.ZodDefault<z.ZodNumber>;
	wis: z.ZodDefault<z.ZodNumber>;
	hp: z.ZodNumber;
	max_hp: z.ZodNumber;
	mp: z.ZodNumber;
	max_mp: z.ZodNumber;
	vim: z.ZodNumber;
	max_vim: z.ZodNumber;
	hero: z.ZodOptional<z.ZodNumber>;
	max_hero: z.ZodOptional<z.ZodNumber>;
	init: z.ZodNumber;
	speed: z.ZodNumber;
	xp: z.ZodOptional<z.ZodNumber>;
	sp: z.ZodOptional<z.ZodNumber>;
	armor: z.ZodOptional<z.ZodNumber>;
	burden: z.ZodOptional<z.ZodNumber>;
	casting: z.ZodOptional<z.ZodNumber>;
	l: z.ZodOptional<z.ZodNumber>;
	radius: z.ZodOptional<z.ZodNumber>;
	reach: z.ZodOptional<z.ZodNumber>;
	shield: z.ZodOptional<z.ZodNumber>;
	bluespace: z.ZodOptional<z.ZodNumber>;
	trii: z.ZodOptional<z.ZodNumber>;
	max_trii: z.ZodOptional<z.ZodNumber>;
	free_hands: z.ZodOptional<z.ZodNumber>;
	carrying_capacity: z.ZodOptional<z.ZodNumber>;
	alerts: z.ZodOptional<z.ZodNumber>;
	max_alerts: z.ZodOptional<z.ZodNumber>;
	recovery_shock: z.ZodOptional<z.ZodNumber>;
	acc: z.ZodOptional<z.ZodNumber>;
	dmg: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
	actions_on_turn: z.ZodOptional<z.ZodNumber>;
	reactions_on_turn: z.ZodOptional<z.ZodNumber>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
	aggressive_acc: z.ZodOptional<z.ZodNumber>;
	aggressive_dmg: z.ZodOptional<z.ZodNumber>;
	arcane_acc: z.ZodOptional<z.ZodNumber>;
	arcane_dmg: z.ZodOptional<z.ZodNumber>;
	balanced_acc: z.ZodOptional<z.ZodNumber>;
	balanced_dmg: z.ZodOptional<z.ZodNumber>;
	blade_acc: z.ZodOptional<z.ZodNumber>;
	blade_dmg: z.ZodOptional<z.ZodNumber>;
	bow_acc: z.ZodOptional<z.ZodNumber>;
	bow_dmg: z.ZodOptional<z.ZodNumber>;
	brawling_acc: z.ZodOptional<z.ZodNumber>;
	brawling_dmg: z.ZodOptional<z.ZodNumber>;
	brutal_acc: z.ZodOptional<z.ZodNumber>;
	brutal_dmg: z.ZodOptional<z.ZodNumber>;
	cannon_acc: z.ZodOptional<z.ZodNumber>;
	cannon_dmg: z.ZodOptional<z.ZodNumber>;
	great_acc: z.ZodOptional<z.ZodNumber>;
	great_dmg: z.ZodOptional<z.ZodNumber>;
	grenade_acc: z.ZodOptional<z.ZodNumber>;
	grenade_dmg: z.ZodOptional<z.ZodNumber>;
	hookwhip_acc: z.ZodOptional<z.ZodNumber>;
	hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
	improvised_acc: z.ZodOptional<z.ZodNumber>;
	improvised_dmg: z.ZodOptional<z.ZodNumber>;
	polearm_acc: z.ZodOptional<z.ZodNumber>;
	polearm_dmg: z.ZodOptional<z.ZodNumber>;
	protector_acc: z.ZodOptional<z.ZodNumber>;
	protector_dmg: z.ZodOptional<z.ZodNumber>;
	rifle_acc: z.ZodOptional<z.ZodNumber>;
	rifle_dmg: z.ZodOptional<z.ZodNumber>;
	shotgun_acc: z.ZodOptional<z.ZodNumber>;
	shotgun_dmg: z.ZodOptional<z.ZodNumber>;
	sidearm_acc: z.ZodOptional<z.ZodNumber>;
	sidearm_dmg: z.ZodOptional<z.ZodNumber>;
	thrown_acc: z.ZodOptional<z.ZodNumber>;
	thrown_dmg: z.ZodOptional<z.ZodNumber>;
	tinkertech_acc: z.ZodOptional<z.ZodNumber>;
	tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
	unarmed_acc: z.ZodOptional<z.ZodNumber>;
	unarmed_dmg: z.ZodOptional<z.ZodNumber>;
	whip_acc: z.ZodOptional<z.ZodNumber>;
	whip_dmg: z.ZodOptional<z.ZodNumber>;
	fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
	vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
	stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
	attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
	magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burning: z.ZodOptional<z.ZodNumber>;
	bleeding: z.ZodOptional<z.ZodNumber>;
	paralysis: z.ZodOptional<z.ZodNumber>;
	stun: z.ZodOptional<z.ZodNumber>;
	agi_dmg: z.ZodOptional<z.ZodNumber>;
	cha_dmg: z.ZodOptional<z.ZodNumber>;
	dex_dmg: z.ZodOptional<z.ZodNumber>;
	int_dmg: z.ZodOptional<z.ZodNumber>;
	per_dmg: z.ZodOptional<z.ZodNumber>;
	spi_dmg: z.ZodOptional<z.ZodNumber>;
	str_dmg: z.ZodOptional<z.ZodNumber>;
	tek_dmg: z.ZodOptional<z.ZodNumber>;
	wis_dmg: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodNumber, z.objectOutputType<{
	agi: z.ZodDefault<z.ZodNumber>;
	cha: z.ZodDefault<z.ZodNumber>;
	dex: z.ZodDefault<z.ZodNumber>;
	int: z.ZodDefault<z.ZodNumber>;
	per: z.ZodDefault<z.ZodNumber>;
	spi: z.ZodDefault<z.ZodNumber>;
	str: z.ZodDefault<z.ZodNumber>;
	tek: z.ZodDefault<z.ZodNumber>;
	wis: z.ZodDefault<z.ZodNumber>;
	hp: z.ZodNumber;
	max_hp: z.ZodNumber;
	mp: z.ZodNumber;
	max_mp: z.ZodNumber;
	vim: z.ZodNumber;
	max_vim: z.ZodNumber;
	hero: z.ZodOptional<z.ZodNumber>;
	max_hero: z.ZodOptional<z.ZodNumber>;
	init: z.ZodNumber;
	speed: z.ZodNumber;
	xp: z.ZodOptional<z.ZodNumber>;
	sp: z.ZodOptional<z.ZodNumber>;
	armor: z.ZodOptional<z.ZodNumber>;
	burden: z.ZodOptional<z.ZodNumber>;
	casting: z.ZodOptional<z.ZodNumber>;
	l: z.ZodOptional<z.ZodNumber>;
	radius: z.ZodOptional<z.ZodNumber>;
	reach: z.ZodOptional<z.ZodNumber>;
	shield: z.ZodOptional<z.ZodNumber>;
	bluespace: z.ZodOptional<z.ZodNumber>;
	trii: z.ZodOptional<z.ZodNumber>;
	max_trii: z.ZodOptional<z.ZodNumber>;
	free_hands: z.ZodOptional<z.ZodNumber>;
	carrying_capacity: z.ZodOptional<z.ZodNumber>;
	alerts: z.ZodOptional<z.ZodNumber>;
	max_alerts: z.ZodOptional<z.ZodNumber>;
	recovery_shock: z.ZodOptional<z.ZodNumber>;
	acc: z.ZodOptional<z.ZodNumber>;
	dmg: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
	actions_on_turn: z.ZodOptional<z.ZodNumber>;
	reactions_on_turn: z.ZodOptional<z.ZodNumber>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
	aggressive_acc: z.ZodOptional<z.ZodNumber>;
	aggressive_dmg: z.ZodOptional<z.ZodNumber>;
	arcane_acc: z.ZodOptional<z.ZodNumber>;
	arcane_dmg: z.ZodOptional<z.ZodNumber>;
	balanced_acc: z.ZodOptional<z.ZodNumber>;
	balanced_dmg: z.ZodOptional<z.ZodNumber>;
	blade_acc: z.ZodOptional<z.ZodNumber>;
	blade_dmg: z.ZodOptional<z.ZodNumber>;
	bow_acc: z.ZodOptional<z.ZodNumber>;
	bow_dmg: z.ZodOptional<z.ZodNumber>;
	brawling_acc: z.ZodOptional<z.ZodNumber>;
	brawling_dmg: z.ZodOptional<z.ZodNumber>;
	brutal_acc: z.ZodOptional<z.ZodNumber>;
	brutal_dmg: z.ZodOptional<z.ZodNumber>;
	cannon_acc: z.ZodOptional<z.ZodNumber>;
	cannon_dmg: z.ZodOptional<z.ZodNumber>;
	great_acc: z.ZodOptional<z.ZodNumber>;
	great_dmg: z.ZodOptional<z.ZodNumber>;
	grenade_acc: z.ZodOptional<z.ZodNumber>;
	grenade_dmg: z.ZodOptional<z.ZodNumber>;
	hookwhip_acc: z.ZodOptional<z.ZodNumber>;
	hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
	improvised_acc: z.ZodOptional<z.ZodNumber>;
	improvised_dmg: z.ZodOptional<z.ZodNumber>;
	polearm_acc: z.ZodOptional<z.ZodNumber>;
	polearm_dmg: z.ZodOptional<z.ZodNumber>;
	protector_acc: z.ZodOptional<z.ZodNumber>;
	protector_dmg: z.ZodOptional<z.ZodNumber>;
	rifle_acc: z.ZodOptional<z.ZodNumber>;
	rifle_dmg: z.ZodOptional<z.ZodNumber>;
	shotgun_acc: z.ZodOptional<z.ZodNumber>;
	shotgun_dmg: z.ZodOptional<z.ZodNumber>;
	sidearm_acc: z.ZodOptional<z.ZodNumber>;
	sidearm_dmg: z.ZodOptional<z.ZodNumber>;
	thrown_acc: z.ZodOptional<z.ZodNumber>;
	thrown_dmg: z.ZodOptional<z.ZodNumber>;
	tinkertech_acc: z.ZodOptional<z.ZodNumber>;
	tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
	unarmed_acc: z.ZodOptional<z.ZodNumber>;
	unarmed_dmg: z.ZodOptional<z.ZodNumber>;
	whip_acc: z.ZodOptional<z.ZodNumber>;
	whip_dmg: z.ZodOptional<z.ZodNumber>;
	fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
	vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
	stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
	attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
	magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burning: z.ZodOptional<z.ZodNumber>;
	bleeding: z.ZodOptional<z.ZodNumber>;
	paralysis: z.ZodOptional<z.ZodNumber>;
	stun: z.ZodOptional<z.ZodNumber>;
	agi_dmg: z.ZodOptional<z.ZodNumber>;
	cha_dmg: z.ZodOptional<z.ZodNumber>;
	dex_dmg: z.ZodOptional<z.ZodNumber>;
	int_dmg: z.ZodOptional<z.ZodNumber>;
	per_dmg: z.ZodOptional<z.ZodNumber>;
	spi_dmg: z.ZodOptional<z.ZodNumber>;
	str_dmg: z.ZodOptional<z.ZodNumber>;
	tek_dmg: z.ZodOptional<z.ZodNumber>;
	wis_dmg: z.ZodOptional<z.ZodNumber>;
}, z.ZodNumber, "strip">, z.objectInputType<{
	agi: z.ZodDefault<z.ZodNumber>;
	cha: z.ZodDefault<z.ZodNumber>;
	dex: z.ZodDefault<z.ZodNumber>;
	int: z.ZodDefault<z.ZodNumber>;
	per: z.ZodDefault<z.ZodNumber>;
	spi: z.ZodDefault<z.ZodNumber>;
	str: z.ZodDefault<z.ZodNumber>;
	tek: z.ZodDefault<z.ZodNumber>;
	wis: z.ZodDefault<z.ZodNumber>;
	hp: z.ZodNumber;
	max_hp: z.ZodNumber;
	mp: z.ZodNumber;
	max_mp: z.ZodNumber;
	vim: z.ZodNumber;
	max_vim: z.ZodNumber;
	hero: z.ZodOptional<z.ZodNumber>;
	max_hero: z.ZodOptional<z.ZodNumber>;
	init: z.ZodNumber;
	speed: z.ZodNumber;
	xp: z.ZodOptional<z.ZodNumber>;
	sp: z.ZodOptional<z.ZodNumber>;
	armor: z.ZodOptional<z.ZodNumber>;
	burden: z.ZodOptional<z.ZodNumber>;
	casting: z.ZodOptional<z.ZodNumber>;
	l: z.ZodOptional<z.ZodNumber>;
	radius: z.ZodOptional<z.ZodNumber>;
	reach: z.ZodOptional<z.ZodNumber>;
	shield: z.ZodOptional<z.ZodNumber>;
	bluespace: z.ZodOptional<z.ZodNumber>;
	trii: z.ZodOptional<z.ZodNumber>;
	max_trii: z.ZodOptional<z.ZodNumber>;
	free_hands: z.ZodOptional<z.ZodNumber>;
	carrying_capacity: z.ZodOptional<z.ZodNumber>;
	alerts: z.ZodOptional<z.ZodNumber>;
	max_alerts: z.ZodOptional<z.ZodNumber>;
	recovery_shock: z.ZodOptional<z.ZodNumber>;
	acc: z.ZodOptional<z.ZodNumber>;
	dmg: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
	actions_on_turn: z.ZodOptional<z.ZodNumber>;
	reactions_on_turn: z.ZodOptional<z.ZodNumber>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
	aggressive_acc: z.ZodOptional<z.ZodNumber>;
	aggressive_dmg: z.ZodOptional<z.ZodNumber>;
	arcane_acc: z.ZodOptional<z.ZodNumber>;
	arcane_dmg: z.ZodOptional<z.ZodNumber>;
	balanced_acc: z.ZodOptional<z.ZodNumber>;
	balanced_dmg: z.ZodOptional<z.ZodNumber>;
	blade_acc: z.ZodOptional<z.ZodNumber>;
	blade_dmg: z.ZodOptional<z.ZodNumber>;
	bow_acc: z.ZodOptional<z.ZodNumber>;
	bow_dmg: z.ZodOptional<z.ZodNumber>;
	brawling_acc: z.ZodOptional<z.ZodNumber>;
	brawling_dmg: z.ZodOptional<z.ZodNumber>;
	brutal_acc: z.ZodOptional<z.ZodNumber>;
	brutal_dmg: z.ZodOptional<z.ZodNumber>;
	cannon_acc: z.ZodOptional<z.ZodNumber>;
	cannon_dmg: z.ZodOptional<z.ZodNumber>;
	great_acc: z.ZodOptional<z.ZodNumber>;
	great_dmg: z.ZodOptional<z.ZodNumber>;
	grenade_acc: z.ZodOptional<z.ZodNumber>;
	grenade_dmg: z.ZodOptional<z.ZodNumber>;
	hookwhip_acc: z.ZodOptional<z.ZodNumber>;
	hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
	improvised_acc: z.ZodOptional<z.ZodNumber>;
	improvised_dmg: z.ZodOptional<z.ZodNumber>;
	polearm_acc: z.ZodOptional<z.ZodNumber>;
	polearm_dmg: z.ZodOptional<z.ZodNumber>;
	protector_acc: z.ZodOptional<z.ZodNumber>;
	protector_dmg: z.ZodOptional<z.ZodNumber>;
	rifle_acc: z.ZodOptional<z.ZodNumber>;
	rifle_dmg: z.ZodOptional<z.ZodNumber>;
	shotgun_acc: z.ZodOptional<z.ZodNumber>;
	shotgun_dmg: z.ZodOptional<z.ZodNumber>;
	sidearm_acc: z.ZodOptional<z.ZodNumber>;
	sidearm_dmg: z.ZodOptional<z.ZodNumber>;
	thrown_acc: z.ZodOptional<z.ZodNumber>;
	thrown_dmg: z.ZodOptional<z.ZodNumber>;
	tinkertech_acc: z.ZodOptional<z.ZodNumber>;
	tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
	unarmed_acc: z.ZodOptional<z.ZodNumber>;
	unarmed_dmg: z.ZodOptional<z.ZodNumber>;
	whip_acc: z.ZodOptional<z.ZodNumber>;
	whip_dmg: z.ZodOptional<z.ZodNumber>;
	fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
	vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
	stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
	attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
	magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
	piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
	burning: z.ZodOptional<z.ZodNumber>;
	bleeding: z.ZodOptional<z.ZodNumber>;
	paralysis: z.ZodOptional<z.ZodNumber>;
	stun: z.ZodOptional<z.ZodNumber>;
	agi_dmg: z.ZodOptional<z.ZodNumber>;
	cha_dmg: z.ZodOptional<z.ZodNumber>;
	dex_dmg: z.ZodOptional<z.ZodNumber>;
	int_dmg: z.ZodOptional<z.ZodNumber>;
	per_dmg: z.ZodOptional<z.ZodNumber>;
	spi_dmg: z.ZodOptional<z.ZodNumber>;
	str_dmg: z.ZodOptional<z.ZodNumber>;
	tek_dmg: z.ZodOptional<z.ZodNumber>;
	wis_dmg: z.ZodOptional<z.ZodNumber>;
}, z.ZodNumber, "strip">>;
export declare const partialAttributesValidator: z.ZodObject<{
	agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	hp: z.ZodOptional<z.ZodNumber>;
	max_hp: z.ZodOptional<z.ZodNumber>;
	mp: z.ZodOptional<z.ZodNumber>;
	max_mp: z.ZodOptional<z.ZodNumber>;
	vim: z.ZodOptional<z.ZodNumber>;
	max_vim: z.ZodOptional<z.ZodNumber>;
	hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	init: z.ZodOptional<z.ZodNumber>;
	speed: z.ZodOptional<z.ZodNumber>;
	xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodNumber, z.objectOutputType<{
	agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	hp: z.ZodOptional<z.ZodNumber>;
	max_hp: z.ZodOptional<z.ZodNumber>;
	mp: z.ZodOptional<z.ZodNumber>;
	max_mp: z.ZodOptional<z.ZodNumber>;
	vim: z.ZodOptional<z.ZodNumber>;
	max_vim: z.ZodOptional<z.ZodNumber>;
	hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	init: z.ZodOptional<z.ZodNumber>;
	speed: z.ZodOptional<z.ZodNumber>;
	xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, z.ZodNumber, "strip">, z.objectInputType<{
	agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
	hp: z.ZodOptional<z.ZodNumber>;
	max_hp: z.ZodOptional<z.ZodNumber>;
	mp: z.ZodOptional<z.ZodNumber>;
	max_mp: z.ZodOptional<z.ZodNumber>;
	vim: z.ZodOptional<z.ZodNumber>;
	max_vim: z.ZodOptional<z.ZodNumber>;
	hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	init: z.ZodOptional<z.ZodNumber>;
	speed: z.ZodOptional<z.ZodNumber>;
	xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, z.ZodNumber, "strip">>;
export declare const validAttributes: string[];
export declare const computedAttributeReason: z.ZodObject<{
	val: z.ZodNumber;
	src: z.ZodString;
	abilityId: z.ZodOptional<z.ZodString>;
	itemId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	val: number;
	src: string;
	abilityId?: string | undefined;
	itemId?: string | undefined;
}, {
	val: number;
	src: string;
	abilityId?: string | undefined;
	itemId?: string | undefined;
}>;
export declare const computedAttributeValidator: z.ZodObject<{
	base: z.ZodOptional<z.ZodNumber>;
	val: z.ZodNumber;
	reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
		val: z.ZodNumber;
		src: z.ZodString;
		abilityId: z.ZodOptional<z.ZodString>;
		itemId: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}, {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}>, "many">>;
	dice: z.ZodOptional<z.ZodObject<{
		explodes: z.ZodOptional<z.ZodBoolean>;
		rr1s: z.ZodOptional<z.ZodBoolean>;
		drop: z.ZodOptional<z.ZodNumber>;
		fatigued: z.ZodOptional<z.ZodBoolean>;
		end: z.ZodOptional<z.ZodString>;
		flow: z.ZodOptional<z.ZodNumber>;
		ebb: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			toggled: z.ZodBoolean;
		}, "strip", z.ZodTypeAny, {
			toggled: boolean;
		}, {
			toggled: boolean;
		}>>>;
		adjust: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		count: z.ZodOptional<z.ZodNumber>;
		sides: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}>>;
}, "strip", z.ZodTypeAny, {
	val: number;
	base?: number | undefined;
	reason?: {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}[] | undefined;
	dice?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
}, {
	val: number;
	base?: number | undefined;
	reason?: {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}[] | undefined;
	dice?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
}>;
export declare const computedAttributesValidator: z.ZodRecord<z.ZodString, z.ZodObject<{
	base: z.ZodOptional<z.ZodNumber>;
	val: z.ZodNumber;
	reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
		val: z.ZodNumber;
		src: z.ZodString;
		abilityId: z.ZodOptional<z.ZodString>;
		itemId: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}, {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}>, "many">>;
	dice: z.ZodOptional<z.ZodObject<{
		explodes: z.ZodOptional<z.ZodBoolean>;
		rr1s: z.ZodOptional<z.ZodBoolean>;
		drop: z.ZodOptional<z.ZodNumber>;
		fatigued: z.ZodOptional<z.ZodBoolean>;
		end: z.ZodOptional<z.ZodString>;
		flow: z.ZodOptional<z.ZodNumber>;
		ebb: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			toggled: z.ZodBoolean;
		}, "strip", z.ZodTypeAny, {
			toggled: boolean;
		}, {
			toggled: boolean;
		}>>>;
		adjust: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		count: z.ZodOptional<z.ZodNumber>;
		sides: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}>>;
}, "strip", z.ZodTypeAny, {
	val: number;
	base?: number | undefined;
	reason?: {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}[] | undefined;
	dice?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
}, {
	val: number;
	base?: number | undefined;
	reason?: {
		val: number;
		src: string;
		abilityId?: string | undefined;
		itemId?: string | undefined;
	}[] | undefined;
	dice?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
}>>;
export type EntityAttribute = z.infer<typeof attributeNameValidator>;
export type EntityAttributes = z.infer<typeof attributesValidator>;
export type BaseEntityAttribute = z.infer<typeof baseAttributeFieldValidator>;
export type ComputedAttributeReason = z.infer<typeof computedAttributeReason>;
export type ComputedAttribute = z.infer<typeof computedAttributeValidator>;
export type ComputedAttributes = z.infer<typeof computedAttributesValidator>;
export type PartialEntityAttributes = z.infer<typeof partialAttributesValidator>;
export declare const optionalComputedAttributesResponseValidator: z.ZodObject<{
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
}, "strip", z.ZodTypeAny, {
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export type OptionalComputedAttributesResponse = z.infer<typeof optionalComputedAttributesResponseValidator>;
export declare const itemFieldsValidator: z.ZodObject<{
	attr: z.ZodOptional<z.ZodString>;
	category: z.ZodOptional<z.ZodString>;
	courses: z.ZodOptional<z.ZodString>;
	dmg: z.ZodOptional<z.ZodString>;
	range: z.ZodOptional<z.ZodString>;
	special: z.ZodOptional<z.ZodString>;
	weapon_type: z.ZodOptional<z.ZodString>;
	dc_cost: z.ZodOptional<z.ZodNumber>;
	in_storage: z.ZodOptional<z.ZodBoolean>;
	not_evadable: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	dmg?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
}, {
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	dmg?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
}>;
export declare const weaponFieldsWithOptionalLabel: z.ZodObject<{
	dmg: z.ZodOptional<z.ZodString>;
	attr: z.ZodOptional<z.ZodString>;
	category: z.ZodOptional<z.ZodString>;
	courses: z.ZodOptional<z.ZodString>;
	range: z.ZodOptional<z.ZodString>;
	special: z.ZodOptional<z.ZodString>;
	weapon_type: z.ZodOptional<z.ZodString>;
	dc_cost: z.ZodOptional<z.ZodNumber>;
	in_storage: z.ZodOptional<z.ZodBoolean>;
	not_evadable: z.ZodOptional<z.ZodBoolean>;
	label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	dmg?: string | undefined;
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
	label?: string | undefined;
}, {
	dmg?: string | undefined;
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
	label?: string | undefined;
}>;
export declare const useAttrMapValidator: z.ZodRecord<z.ZodString, z.ZodUnion<[
	z.ZodNumber,
	z.ZodString
]>>;
export type UseAttrMap = z.infer<typeof useAttrMapValidator>;
export declare const useRollValidator: z.ZodObject<{
	dice: z.ZodString;
	attr: z.ZodString;
	heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>>;
}, "strip", z.ZodTypeAny, {
	dice: string;
	attr: string;
	heal?: Record<string, string | number> | undefined;
}, {
	dice: string;
	attr: string;
	heal?: Record<string, string | number> | undefined;
}>;
export declare const useHealValidator: z.ZodObject<{
	attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
}, "strip", z.ZodTypeAny, {
	attr: Record<string, string | number>;
}, {
	attr: Record<string, string | number>;
}>;
export declare const useOptionalHealValidator: z.ZodObject<{
	attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
	label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	attr: Record<string, string | number>;
	label?: string | undefined;
}, {
	attr: Record<string, string | number>;
	label?: string | undefined;
}>;
export declare const useAdjustValidator: z.ZodObject<{
	time: z.ZodEnum<[
		"turn",
		"encounter",
		"rest",
		"permanent"
	]>;
	attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>>;
	dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
		explodes: z.ZodOptional<z.ZodBoolean>;
		rr1s: z.ZodOptional<z.ZodBoolean>;
		drop: z.ZodOptional<z.ZodNumber>;
		fatigued: z.ZodOptional<z.ZodBoolean>;
		end: z.ZodOptional<z.ZodString>;
		flow: z.ZodOptional<z.ZodNumber>;
		ebb: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			toggled: z.ZodBoolean;
		}, "strip", z.ZodTypeAny, {
			toggled: boolean;
		}, {
			toggled: boolean;
		}>>>;
		adjust: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		count: z.ZodOptional<z.ZodNumber>;
		sides: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}>>>;
	order: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	time: "turn" | "encounter" | "rest" | "permanent";
	attr?: Record<string, string | number> | undefined;
	dice?: Record<string, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}> | undefined;
	order?: number | undefined;
}, {
	time: "turn" | "encounter" | "rest" | "permanent";
	attr?: Record<string, string | number> | undefined;
	dice?: Record<string, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}> | undefined;
	order?: number | undefined;
}>;
export declare const criteriaFieldOperator: z.ZodEnum<[
	"equals",
	"gte",
	"gt",
	"lte",
	"lt"
]>;
export type CriteriaFieldOperator = z.infer<typeof criteriaFieldOperator>;
export declare const useCriteriaCompFieldAttrValidator: z.ZodObject<{
	type: z.ZodLiteral<"attr">;
	attr: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "attr";
	attr: string;
}, {
	type: "attr";
	attr: string;
}>;
export type UseCriteriaCompFieldAttr = z.infer<typeof useCriteriaCompFieldAttrValidator>;
export declare const useCriteriaCompFieldAbilityValidator: z.ZodObject<{
	type: z.ZodLiteral<"ability_field">;
	path: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	path: string[];
	type: "ability_field";
}, {
	path: string[];
	type: "ability_field";
}>;
export type UseCriteriaCompFieldAbilityField = z.infer<typeof useCriteriaCompFieldAbilityValidator>;
export declare const useCriteriaCompFieldKeyValidator: z.ZodObject<{
	type: z.ZodLiteral<"key">;
	key: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "key";
	key: string;
}, {
	type: "key";
	key: string;
}>;
export type UseCriteriaCompFieldKey = z.infer<typeof useCriteriaCompFieldKeyValidator>;
export declare const useCriteriaCompFieldConstValidator: z.ZodObject<{
	type: z.ZodLiteral<"const">;
	const: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "const";
	const: string;
}, {
	type: "const";
	const: string;
}>;
export type UseCriteriaCompFieldCost = z.infer<typeof useCriteriaCompFieldConstValidator>;
export declare const useCriteriaCompFieldEquationValidator: z.ZodObject<{
	type: z.ZodLiteral<"equation">;
	equation: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "equation";
	equation: string;
}, {
	type: "equation";
	equation: string;
}>;
export type UseCriteriaCompFieldEquation = z.infer<typeof useCriteriaCompFieldEquationValidator>;
export declare const useCriteriaCompFieldValidator: z.ZodUnion<[
	z.ZodObject<{
		type: z.ZodLiteral<"attr">;
		attr: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "attr";
		attr: string;
	}, {
		type: "attr";
		attr: string;
	}>,
	z.ZodObject<{
		type: z.ZodLiteral<"ability_field">;
		path: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		path: string[];
		type: "ability_field";
	}, {
		path: string[];
		type: "ability_field";
	}>,
	z.ZodObject<{
		type: z.ZodLiteral<"key">;
		key: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "key";
		key: string;
	}, {
		type: "key";
		key: string;
	}>,
	z.ZodObject<{
		type: z.ZodLiteral<"const">;
		const: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "const";
		const: string;
	}, {
		type: "const";
		const: string;
	}>,
	z.ZodObject<{
		type: z.ZodLiteral<"equation">;
		equation: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "equation";
		equation: string;
	}, {
		type: "equation";
		equation: string;
	}>
]>;
export type UseCriteriaCompField = z.infer<typeof useCriteriaCompFieldValidator>;
export declare const useCriteriaCompValidator: z.ZodObject<{
	type: z.ZodLiteral<"comp">;
	left: z.ZodUnion<[
		z.ZodObject<{
			type: z.ZodLiteral<"attr">;
			attr: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "attr";
			attr: string;
		}, {
			type: "attr";
			attr: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"ability_field">;
			path: z.ZodArray<z.ZodString, "many">;
		}, "strip", z.ZodTypeAny, {
			path: string[];
			type: "ability_field";
		}, {
			path: string[];
			type: "ability_field";
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"key">;
			key: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "key";
			key: string;
		}, {
			type: "key";
			key: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"const">;
			const: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "const";
			const: string;
		}, {
			type: "const";
			const: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"equation">;
			equation: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "equation";
			equation: string;
		}, {
			type: "equation";
			equation: string;
		}>
	]>;
	right: z.ZodUnion<[
		z.ZodObject<{
			type: z.ZodLiteral<"attr">;
			attr: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "attr";
			attr: string;
		}, {
			type: "attr";
			attr: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"ability_field">;
			path: z.ZodArray<z.ZodString, "many">;
		}, "strip", z.ZodTypeAny, {
			path: string[];
			type: "ability_field";
		}, {
			path: string[];
			type: "ability_field";
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"key">;
			key: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "key";
			key: string;
		}, {
			type: "key";
			key: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"const">;
			const: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "const";
			const: string;
		}, {
			type: "const";
			const: string;
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"equation">;
			equation: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "equation";
			equation: string;
		}, {
			type: "equation";
			equation: string;
		}>
	]>;
	operator: z.ZodEnum<[
		"equals",
		"gte",
		"gt",
		"lte",
		"lt"
	]>;
}, "strip", z.ZodTypeAny, {
	type: "comp";
	left: {
		type: "attr";
		attr: string;
	} | {
		path: string[];
		type: "ability_field";
	} | {
		type: "key";
		key: string;
	} | {
		type: "const";
		const: string;
	} | {
		type: "equation";
		equation: string;
	};
	right: {
		type: "attr";
		attr: string;
	} | {
		path: string[];
		type: "ability_field";
	} | {
		type: "key";
		key: string;
	} | {
		type: "const";
		const: string;
	} | {
		type: "equation";
		equation: string;
	};
	operator: "equals" | "gte" | "gt" | "lte" | "lt";
}, {
	type: "comp";
	left: {
		type: "attr";
		attr: string;
	} | {
		path: string[];
		type: "ability_field";
	} | {
		type: "key";
		key: string;
	} | {
		type: "const";
		const: string;
	} | {
		type: "equation";
		equation: string;
	};
	right: {
		type: "attr";
		attr: string;
	} | {
		path: string[];
		type: "ability_field";
	} | {
		type: "key";
		key: string;
	} | {
		type: "const";
		const: string;
	} | {
		type: "equation";
		equation: string;
	};
	operator: "equals" | "gte" | "gt" | "lte" | "lt";
}>;
export type UseCriteriaComp = z.infer<typeof useCriteriaCompValidator>;
export declare const useCriteriaSpecialValidator: z.ZodObject<{
	type: z.ZodLiteral<"special">;
	name: z.ZodEnum<[
		"isSpell"
	]>;
}, "strip", z.ZodTypeAny, {
	type: "special";
	name: "isSpell";
}, {
	type: "special";
	name: "isSpell";
}>;
export type UseCriteriaSpecial = z.infer<typeof useCriteriaSpecialValidator>;
export declare const useCriteriaBaseValidatorBase: z.ZodObject<{
	type: z.ZodLiteral<"base">;
	operator: z.ZodEnum<[
		"every",
		"some"
	]>;
}, "strip", z.ZodTypeAny, {
	type: "base";
	operator: "every" | "some";
}, {
	type: "base";
	operator: "every" | "some";
}>;
export type UseCriteriaBase = z.infer<typeof useCriteriaBaseValidatorBase> & {
	tests: Array<z.infer<typeof useCriteriaValidator>>;
};
export declare const useCriteriaBaseValidator: z.ZodType<UseCriteriaBase>;
export declare const useCriteriaValidator: z.ZodUnion<[
	z.ZodObject<{
		type: z.ZodLiteral<"comp">;
		left: z.ZodUnion<[
			z.ZodObject<{
				type: z.ZodLiteral<"attr">;
				attr: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "attr";
				attr: string;
			}, {
				type: "attr";
				attr: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"ability_field">;
				path: z.ZodArray<z.ZodString, "many">;
			}, "strip", z.ZodTypeAny, {
				path: string[];
				type: "ability_field";
			}, {
				path: string[];
				type: "ability_field";
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"key">;
				key: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "key";
				key: string;
			}, {
				type: "key";
				key: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"const">;
				const: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "const";
				const: string;
			}, {
				type: "const";
				const: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"equation">;
				equation: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "equation";
				equation: string;
			}, {
				type: "equation";
				equation: string;
			}>
		]>;
		right: z.ZodUnion<[
			z.ZodObject<{
				type: z.ZodLiteral<"attr">;
				attr: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "attr";
				attr: string;
			}, {
				type: "attr";
				attr: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"ability_field">;
				path: z.ZodArray<z.ZodString, "many">;
			}, "strip", z.ZodTypeAny, {
				path: string[];
				type: "ability_field";
			}, {
				path: string[];
				type: "ability_field";
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"key">;
				key: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "key";
				key: string;
			}, {
				type: "key";
				key: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"const">;
				const: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "const";
				const: string;
			}, {
				type: "const";
				const: string;
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"equation">;
				equation: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "equation";
				equation: string;
			}, {
				type: "equation";
				equation: string;
			}>
		]>;
		operator: z.ZodEnum<[
			"equals",
			"gte",
			"gt",
			"lte",
			"lt"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	}, {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	}>,
	z.ZodObject<{
		type: z.ZodLiteral<"special">;
		name: z.ZodEnum<[
			"isSpell"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "special";
		name: "isSpell";
	}, {
		type: "special";
		name: "isSpell";
	}>,
	z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
]>;
export type UseCriteria = z.infer<typeof useCriteriaValidator>;
export declare const useAdjustAbilityCostValidator: z.ZodObject<{
	adjust_cost: z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>;
}, "strip", z.ZodTypeAny, {
	adjust_cost: string | number;
}, {
	adjust_cost: string | number;
}>;
export declare const useCheckValidator: z.ZodObject<{
	bonus: z.ZodOptional<z.ZodString>;
	attr: z.ZodString;
	dice_settings: z.ZodOptional<z.ZodObject<{
		explodes: z.ZodOptional<z.ZodBoolean>;
		rr1s: z.ZodOptional<z.ZodBoolean>;
		drop: z.ZodOptional<z.ZodNumber>;
		fatigued: z.ZodOptional<z.ZodBoolean>;
		end: z.ZodOptional<z.ZodString>;
		flow: z.ZodOptional<z.ZodNumber>;
		ebb: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			toggled: z.ZodBoolean;
		}, "strip", z.ZodTypeAny, {
			toggled: boolean;
		}, {
			toggled: boolean;
		}>>>;
		adjust: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		count: z.ZodOptional<z.ZodNumber>;
		sides: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}>>;
	label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	attr: string;
	bonus?: string | undefined;
	dice_settings?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
	label?: string | undefined;
}, {
	attr: string;
	bonus?: string | undefined;
	dice_settings?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
	label?: string | undefined;
}>;
export declare const useExposeCombatStats: z.ZodArray<z.ZodString, "many">;
export declare const useCriteriaBenefit: z.ZodObject<{
	criteria: z.ZodUnion<[
		z.ZodObject<{
			type: z.ZodLiteral<"comp">;
			left: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"attr">;
					attr: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "attr";
					attr: string;
				}, {
					type: "attr";
					attr: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"ability_field">;
					path: z.ZodArray<z.ZodString, "many">;
				}, "strip", z.ZodTypeAny, {
					path: string[];
					type: "ability_field";
				}, {
					path: string[];
					type: "ability_field";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"key">;
					key: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "key";
					key: string;
				}, {
					type: "key";
					key: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"const">;
					const: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "const";
					const: string;
				}, {
					type: "const";
					const: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"equation">;
					equation: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "equation";
					equation: string;
				}, {
					type: "equation";
					equation: string;
				}>
			]>;
			right: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"attr">;
					attr: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "attr";
					attr: string;
				}, {
					type: "attr";
					attr: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"ability_field">;
					path: z.ZodArray<z.ZodString, "many">;
				}, "strip", z.ZodTypeAny, {
					path: string[];
					type: "ability_field";
				}, {
					path: string[];
					type: "ability_field";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"key">;
					key: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "key";
					key: string;
				}, {
					type: "key";
					key: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"const">;
					const: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "const";
					const: string;
				}, {
					type: "const";
					const: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"equation">;
					equation: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "equation";
					equation: string;
				}, {
					type: "equation";
					equation: string;
				}>
			]>;
			operator: z.ZodEnum<[
				"equals",
				"gte",
				"gt",
				"lte",
				"lt"
			]>;
		}, "strip", z.ZodTypeAny, {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		}, {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"special">;
			name: z.ZodEnum<[
				"isSpell"
			]>;
		}, "strip", z.ZodTypeAny, {
			type: "special";
			name: "isSpell";
		}, {
			type: "special";
			name: "isSpell";
		}>,
		z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
	]>;
	adjust: z.ZodOptional<z.ZodObject<{
		time: z.ZodEnum<[
			"turn",
			"encounter",
			"rest",
			"permanent"
		]>;
		attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>>;
		dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>>;
		order: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}>>;
	adjust_ability_cost: z.ZodOptional<z.ZodObject<{
		adjust_cost: z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>;
	}, "strip", z.ZodTypeAny, {
		adjust_cost: string | number;
	}, {
		adjust_cost: string | number;
	}>>;
	check: z.ZodOptional<z.ZodObject<{
		bonus: z.ZodOptional<z.ZodString>;
		attr: z.ZodString;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		label: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}>>;
}, "strip", z.ZodTypeAny, {
	criteria: {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	} | {
		type: "special";
		name: "isSpell";
	} | ({
		type: "base";
		operator: "every" | "some";
	} & {
		tests: Array<z.infer<typeof useCriteriaValidator>>;
	});
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
}, {
	criteria: {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	} | {
		type: "special";
		name: "isSpell";
	} | ({
		type: "base";
		operator: "every" | "some";
	} & {
		tests: Array<z.infer<typeof useCriteriaValidator>>;
	});
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
}>;
export declare const useCriteriaBenefitResults: z.ZodArray<z.ZodObject<{
	criteria: z.ZodUnion<[
		z.ZodObject<{
			type: z.ZodLiteral<"comp">;
			left: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"attr">;
					attr: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "attr";
					attr: string;
				}, {
					type: "attr";
					attr: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"ability_field">;
					path: z.ZodArray<z.ZodString, "many">;
				}, "strip", z.ZodTypeAny, {
					path: string[];
					type: "ability_field";
				}, {
					path: string[];
					type: "ability_field";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"key">;
					key: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "key";
					key: string;
				}, {
					type: "key";
					key: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"const">;
					const: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "const";
					const: string;
				}, {
					type: "const";
					const: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"equation">;
					equation: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "equation";
					equation: string;
				}, {
					type: "equation";
					equation: string;
				}>
			]>;
			right: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"attr">;
					attr: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "attr";
					attr: string;
				}, {
					type: "attr";
					attr: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"ability_field">;
					path: z.ZodArray<z.ZodString, "many">;
				}, "strip", z.ZodTypeAny, {
					path: string[];
					type: "ability_field";
				}, {
					path: string[];
					type: "ability_field";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"key">;
					key: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "key";
					key: string;
				}, {
					type: "key";
					key: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"const">;
					const: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "const";
					const: string;
				}, {
					type: "const";
					const: string;
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"equation">;
					equation: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					type: "equation";
					equation: string;
				}, {
					type: "equation";
					equation: string;
				}>
			]>;
			operator: z.ZodEnum<[
				"equals",
				"gte",
				"gt",
				"lte",
				"lt"
			]>;
		}, "strip", z.ZodTypeAny, {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		}, {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		}>,
		z.ZodObject<{
			type: z.ZodLiteral<"special">;
			name: z.ZodEnum<[
				"isSpell"
			]>;
		}, "strip", z.ZodTypeAny, {
			type: "special";
			name: "isSpell";
		}, {
			type: "special";
			name: "isSpell";
		}>,
		z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
	]>;
	adjust: z.ZodOptional<z.ZodObject<{
		time: z.ZodEnum<[
			"turn",
			"encounter",
			"rest",
			"permanent"
		]>;
		attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>>;
		dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>>;
		order: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}>>;
	adjust_ability_cost: z.ZodOptional<z.ZodObject<{
		adjust_cost: z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>;
	}, "strip", z.ZodTypeAny, {
		adjust_cost: string | number;
	}, {
		adjust_cost: string | number;
	}>>;
	check: z.ZodOptional<z.ZodObject<{
		bonus: z.ZodOptional<z.ZodString>;
		attr: z.ZodString;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		label: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}>>;
}, "strip", z.ZodTypeAny, {
	criteria: {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	} | {
		type: "special";
		name: "isSpell";
	} | ({
		type: "base";
		operator: "every" | "some";
	} & {
		tests: Array<z.infer<typeof useCriteriaValidator>>;
	});
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
}, {
	criteria: {
		type: "comp";
		left: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		right: {
			type: "attr";
			attr: string;
		} | {
			path: string[];
			type: "ability_field";
		} | {
			type: "key";
			key: string;
		} | {
			type: "const";
			const: string;
		} | {
			type: "equation";
			equation: string;
		};
		operator: "equals" | "gte" | "gt" | "lte" | "lt";
	} | {
		type: "special";
		name: "isSpell";
	} | ({
		type: "base";
		operator: "every" | "some";
	} & {
		tests: Array<z.infer<typeof useCriteriaValidator>>;
	});
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
}>, "many">;
export declare const useInputBase: z.ZodObject<{
	key: z.ZodString;
	label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	key: string;
	label?: string | undefined;
}, {
	key: string;
	label?: string | undefined;
}>;
export declare const useRadioInputBase: z.ZodObject<{
	label: z.ZodOptional<z.ZodString>;
	key: z.ZodString;
	type: z.ZodLiteral<"radio">;
}, "strip", z.ZodTypeAny, {
	type: "radio";
	key: string;
	label?: string | undefined;
}, {
	type: "radio";
	key: string;
	label?: string | undefined;
}>;
export type UseRadioInput = z.infer<typeof useRadioInputBase> & {
	choices: Record<string, UseInputs>;
};
export declare const useRadioInput: z.ZodType<UseRadioInput>;
export declare const useTextInput: z.ZodObject<{
	label: z.ZodOptional<z.ZodString>;
	key: z.ZodString;
	type: z.ZodLiteral<"text">;
}, "strip", z.ZodTypeAny, {
	type: "text";
	key: string;
	label?: string | undefined;
}, {
	type: "text";
	key: string;
	label?: string | undefined;
}>;
export type UseTextInput = z.infer<typeof useTextInput>;
export declare const useNumberInput: z.ZodObject<{
	label: z.ZodOptional<z.ZodString>;
	key: z.ZodString;
	type: z.ZodLiteral<"number">;
	min: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
	max: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
	default: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodString
	]>>;
}, "strip", z.ZodTypeAny, {
	type: "number";
	key: string;
	label?: string | undefined;
	min?: string | number | undefined;
	max?: string | number | undefined;
	default?: string | number | undefined;
}, {
	type: "number";
	key: string;
	label?: string | undefined;
	min?: string | number | undefined;
	max?: string | number | undefined;
	default?: string | number | undefined;
}>;
export type UseNumberInput = z.infer<typeof useNumberInput>;
export declare const useInput: z.ZodUnion<[
	z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
	z.ZodObject<{
		label: z.ZodOptional<z.ZodString>;
		key: z.ZodString;
		type: z.ZodLiteral<"text">;
	}, "strip", z.ZodTypeAny, {
		type: "text";
		key: string;
		label?: string | undefined;
	}, {
		type: "text";
		key: string;
		label?: string | undefined;
	}>,
	z.ZodObject<{
		label: z.ZodOptional<z.ZodString>;
		key: z.ZodString;
		type: z.ZodLiteral<"number">;
		min: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		max: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		default: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
	}, "strip", z.ZodTypeAny, {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	}, {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	}>
]>;
export declare const useInputs: z.ZodArray<z.ZodUnion<[
	z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
	z.ZodObject<{
		label: z.ZodOptional<z.ZodString>;
		key: z.ZodString;
		type: z.ZodLiteral<"text">;
	}, "strip", z.ZodTypeAny, {
		type: "text";
		key: string;
		label?: string | undefined;
	}, {
		type: "text";
		key: string;
		label?: string | undefined;
	}>,
	z.ZodObject<{
		label: z.ZodOptional<z.ZodString>;
		key: z.ZodString;
		type: z.ZodLiteral<"number">;
		min: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		max: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		default: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
	}, "strip", z.ZodTypeAny, {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	}, {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	}>
]>, "many">;
export type UseInputs = z.infer<typeof useInputs>;
export declare const usesValidator: z.ZodObject<{
	roll: z.ZodOptional<z.ZodObject<{
		dice: z.ZodString;
		attr: z.ZodString;
		heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>>;
	}, "strip", z.ZodTypeAny, {
		dice: string;
		attr: string;
		heal?: Record<string, string | number> | undefined;
	}, {
		dice: string;
		attr: string;
		heal?: Record<string, string | number> | undefined;
	}>>;
	heal: z.ZodOptional<z.ZodObject<{
		attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
	}, "strip", z.ZodTypeAny, {
		attr: Record<string, string | number>;
	}, {
		attr: Record<string, string | number>;
	}>>;
	optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
		attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		label: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		attr: Record<string, string | number>;
		label?: string | undefined;
	}, {
		attr: Record<string, string | number>;
		label?: string | undefined;
	}>, "many">>;
	adjust: z.ZodOptional<z.ZodObject<{
		time: z.ZodEnum<[
			"turn",
			"encounter",
			"rest",
			"permanent"
		]>;
		attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>>;
		dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>>;
		order: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}, {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	}>>;
	adjust_ability_cost: z.ZodOptional<z.ZodObject<{
		adjust_cost: z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>;
	}, "strip", z.ZodTypeAny, {
		adjust_cost: string | number;
	}, {
		adjust_cost: string | number;
	}>>;
	check: z.ZodOptional<z.ZodObject<{
		bonus: z.ZodOptional<z.ZodString>;
		attr: z.ZodString;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		label: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}, {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	}>>;
	expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
	inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
		z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
		z.ZodObject<{
			label: z.ZodOptional<z.ZodString>;
			key: z.ZodString;
			type: z.ZodLiteral<"text">;
		}, "strip", z.ZodTypeAny, {
			type: "text";
			key: string;
			label?: string | undefined;
		}, {
			type: "text";
			key: string;
			label?: string | undefined;
		}>,
		z.ZodObject<{
			label: z.ZodOptional<z.ZodString>;
			key: z.ZodString;
			type: z.ZodLiteral<"number">;
			min: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			max: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			default: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		}, {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		}>
	]>, "many">>;
	criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
		criteria: z.ZodUnion<[
			z.ZodObject<{
				type: z.ZodLiteral<"comp">;
				left: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"attr">;
						attr: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "attr";
						attr: string;
					}, {
						type: "attr";
						attr: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"ability_field">;
						path: z.ZodArray<z.ZodString, "many">;
					}, "strip", z.ZodTypeAny, {
						path: string[];
						type: "ability_field";
					}, {
						path: string[];
						type: "ability_field";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"key">;
						key: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "key";
						key: string;
					}, {
						type: "key";
						key: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"const">;
						const: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "const";
						const: string;
					}, {
						type: "const";
						const: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"equation">;
						equation: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "equation";
						equation: string;
					}, {
						type: "equation";
						equation: string;
					}>
				]>;
				right: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"attr">;
						attr: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "attr";
						attr: string;
					}, {
						type: "attr";
						attr: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"ability_field">;
						path: z.ZodArray<z.ZodString, "many">;
					}, "strip", z.ZodTypeAny, {
						path: string[];
						type: "ability_field";
					}, {
						path: string[];
						type: "ability_field";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"key">;
						key: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "key";
						key: string;
					}, {
						type: "key";
						key: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"const">;
						const: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "const";
						const: string;
					}, {
						type: "const";
						const: string;
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"equation">;
						equation: z.ZodString;
					}, "strip", z.ZodTypeAny, {
						type: "equation";
						equation: string;
					}, {
						type: "equation";
						equation: string;
					}>
				]>;
				operator: z.ZodEnum<[
					"equals",
					"gte",
					"gt",
					"lte",
					"lt"
				]>;
			}, "strip", z.ZodTypeAny, {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			}, {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			}>,
			z.ZodObject<{
				type: z.ZodLiteral<"special">;
				name: z.ZodEnum<[
					"isSpell"
				]>;
			}, "strip", z.ZodTypeAny, {
				type: "special";
				name: "isSpell";
			}, {
				type: "special";
				name: "isSpell";
			}>,
			z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
		]>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		criteria: {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		} | {
			type: "special";
			name: "isSpell";
		} | ({
			type: "base";
			operator: "every" | "some";
		} & {
			tests: Array<z.infer<typeof useCriteriaValidator>>;
		});
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
	}, {
		criteria: {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		} | {
			type: "special";
			name: "isSpell";
		} | ({
			type: "base";
			operator: "every" | "some";
		} & {
			tests: Array<z.infer<typeof useCriteriaValidator>>;
		});
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
	}>, "many">>;
	weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
		dmg: z.ZodOptional<z.ZodString>;
		attr: z.ZodOptional<z.ZodString>;
		category: z.ZodOptional<z.ZodString>;
		courses: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		special: z.ZodOptional<z.ZodString>;
		weapon_type: z.ZodOptional<z.ZodString>;
		dc_cost: z.ZodOptional<z.ZodNumber>;
		in_storage: z.ZodOptional<z.ZodBoolean>;
		not_evadable: z.ZodOptional<z.ZodBoolean>;
		label: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		dmg?: string | undefined;
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
		label?: string | undefined;
	}, {
		dmg?: string | undefined;
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
		label?: string | undefined;
	}>, "many">>;
	hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	roll?: {
		dice: string;
		attr: string;
		heal?: Record<string, string | number> | undefined;
	} | undefined;
	heal?: {
		attr: Record<string, string | number>;
	} | undefined;
	optional_heal?: {
		attr: Record<string, string | number>;
		label?: string | undefined;
	}[] | undefined;
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
	expose_combat_stats?: string[] | undefined;
	inputs?: (UseRadioInput | {
		type: "text";
		key: string;
		label?: string | undefined;
	} | {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	})[] | undefined;
	criteria_benefits?: {
		criteria: {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		} | {
			type: "special";
			name: "isSpell";
		} | ({
			type: "base";
			operator: "every" | "some";
		} & {
			tests: Array<z.infer<typeof useCriteriaValidator>>;
		});
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
	}[] | undefined;
	weapons?: {
		dmg?: string | undefined;
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
		label?: string | undefined;
	}[] | undefined;
	hide_default_use_button?: boolean | undefined;
}, {
	roll?: {
		dice: string;
		attr: string;
		heal?: Record<string, string | number> | undefined;
	} | undefined;
	heal?: {
		attr: Record<string, string | number>;
	} | undefined;
	optional_heal?: {
		attr: Record<string, string | number>;
		label?: string | undefined;
	}[] | undefined;
	adjust?: {
		time: "turn" | "encounter" | "rest" | "permanent";
		attr?: Record<string, string | number> | undefined;
		dice?: Record<string, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}> | undefined;
		order?: number | undefined;
	} | undefined;
	adjust_ability_cost?: {
		adjust_cost: string | number;
	} | undefined;
	check?: {
		attr: string;
		bonus?: string | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		label?: string | undefined;
	} | undefined;
	expose_combat_stats?: string[] | undefined;
	inputs?: (UseRadioInput | {
		type: "text";
		key: string;
		label?: string | undefined;
	} | {
		type: "number";
		key: string;
		label?: string | undefined;
		min?: string | number | undefined;
		max?: string | number | undefined;
		default?: string | number | undefined;
	})[] | undefined;
	criteria_benefits?: {
		criteria: {
			type: "comp";
			left: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			right: {
				type: "attr";
				attr: string;
			} | {
				path: string[];
				type: "ability_field";
			} | {
				type: "key";
				key: string;
			} | {
				type: "const";
				const: string;
			} | {
				type: "equation";
				equation: string;
			};
			operator: "equals" | "gte" | "gt" | "lte" | "lt";
		} | {
			type: "special";
			name: "isSpell";
		} | ({
			type: "base";
			operator: "every" | "some";
		} & {
			tests: Array<z.infer<typeof useCriteriaValidator>>;
		});
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
	}[] | undefined;
	weapons?: {
		dmg?: string | undefined;
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
		label?: string | undefined;
	}[] | undefined;
	hide_default_use_button?: boolean | undefined;
}>;
export type UsesMap = z.infer<typeof usesValidator>;
export type UsesRoll = z.infer<typeof useRollValidator>;
export type UsesHeal = z.infer<typeof useHealValidator>;
export type UsesAdjust = z.infer<typeof useAdjustValidator>;
export type UsesCheck = z.infer<typeof useCheckValidator>;
export declare const abilityCostNumberValidator: z.ZodObject<{
	mp: z.ZodOptional<z.ZodNumber>;
	vim: z.ZodOptional<z.ZodNumber>;
	hp: z.ZodOptional<z.ZodNumber>;
	hero: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	mp?: number | undefined;
	vim?: number | undefined;
	hp?: number | undefined;
	hero?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
}, {
	mp?: number | undefined;
	vim?: number | undefined;
	hp?: number | undefined;
	hero?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
}>;
export declare const abilityCostBooleanValidator: z.ZodObject<{
	attack: z.ZodOptional<z.ZodBoolean>;
	passive: z.ZodOptional<z.ZodBoolean>;
	respite: z.ZodOptional<z.ZodBoolean>;
	rest: z.ZodOptional<z.ZodBoolean>;
	intermission: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	attack?: boolean | undefined;
	passive?: boolean | undefined;
	respite?: boolean | undefined;
	rest?: boolean | undefined;
	intermission?: boolean | undefined;
}, {
	attack?: boolean | undefined;
	passive?: boolean | undefined;
	respite?: boolean | undefined;
	rest?: boolean | undefined;
	intermission?: boolean | undefined;
}>;
export declare const abilityCostValidator: z.ZodObject<{
	hp: z.ZodOptional<z.ZodNumber>;
	mp: z.ZodOptional<z.ZodNumber>;
	vim: z.ZodOptional<z.ZodNumber>;
	hero: z.ZodOptional<z.ZodNumber>;
	actions: z.ZodOptional<z.ZodNumber>;
	reactions: z.ZodOptional<z.ZodNumber>;
	attack: z.ZodOptional<z.ZodBoolean>;
	passive: z.ZodOptional<z.ZodBoolean>;
	respite: z.ZodOptional<z.ZodBoolean>;
	rest: z.ZodOptional<z.ZodBoolean>;
	intermission: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	hp?: number | undefined;
	mp?: number | undefined;
	vim?: number | undefined;
	hero?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
	attack?: boolean | undefined;
	passive?: boolean | undefined;
	respite?: boolean | undefined;
	rest?: boolean | undefined;
	intermission?: boolean | undefined;
}, {
	hp?: number | undefined;
	mp?: number | undefined;
	vim?: number | undefined;
	hero?: number | undefined;
	actions?: number | undefined;
	reactions?: number | undefined;
	attack?: boolean | undefined;
	passive?: boolean | undefined;
	respite?: boolean | undefined;
	rest?: boolean | undefined;
	intermission?: boolean | undefined;
}>;
export declare const abilityFieldsValidatorStrings: z.ZodObject<{
	activation: z.ZodOptional<z.ZodString>;
	expedited: z.ZodOptional<z.ZodString>;
	flavor: z.ZodOptional<z.ZodString>;
	path: z.ZodOptional<z.ZodString>;
	purchase: z.ZodOptional<z.ZodString>;
	unlocks: z.ZodOptional<z.ZodString>;
	partial_unlocks: z.ZodOptional<z.ZodString>;
	prereq: z.ZodOptional<z.ZodString>;
	build_dc: z.ZodOptional<z.ZodString>;
	build_time: z.ZodOptional<z.ZodString>;
	range: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	activation?: string | undefined;
	expedited?: string | undefined;
	flavor?: string | undefined;
	path?: string | undefined;
	purchase?: string | undefined;
	unlocks?: string | undefined;
	partial_unlocks?: string | undefined;
	prereq?: string | undefined;
	build_dc?: string | undefined;
	build_time?: string | undefined;
	range?: string | undefined;
}, {
	activation?: string | undefined;
	expedited?: string | undefined;
	flavor?: string | undefined;
	path?: string | undefined;
	purchase?: string | undefined;
	unlocks?: string | undefined;
	partial_unlocks?: string | undefined;
	prereq?: string | undefined;
	build_dc?: string | undefined;
	build_time?: string | undefined;
	range?: string | undefined;
}>;
export declare const abilityFieldsValidator: z.ZodObject<{
	path: z.ZodOptional<z.ZodString>;
	range: z.ZodOptional<z.ZodString>;
	activation: z.ZodOptional<z.ZodString>;
	expedited: z.ZodOptional<z.ZodString>;
	flavor: z.ZodOptional<z.ZodString>;
	purchase: z.ZodOptional<z.ZodString>;
	unlocks: z.ZodOptional<z.ZodString>;
	partial_unlocks: z.ZodOptional<z.ZodString>;
	prereq: z.ZodOptional<z.ZodString>;
	build_dc: z.ZodOptional<z.ZodString>;
	build_time: z.ZodOptional<z.ZodString>;
	cost: z.ZodOptional<z.ZodObject<{
		hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		attack: z.ZodOptional<z.ZodBoolean>;
		passive: z.ZodOptional<z.ZodBoolean>;
		respite: z.ZodOptional<z.ZodBoolean>;
		rest: z.ZodOptional<z.ZodBoolean>;
		intermission: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		hp?: number | undefined;
		mp?: number | undefined;
		vim?: number | undefined;
		hero?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		attack?: boolean | undefined;
		passive?: boolean | undefined;
		respite?: boolean | undefined;
		rest?: boolean | undefined;
		intermission?: boolean | undefined;
	}, {
		hp?: number | undefined;
		mp?: number | undefined;
		vim?: number | undefined;
		hero?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		attack?: boolean | undefined;
		passive?: boolean | undefined;
		respite?: boolean | undefined;
		rest?: boolean | undefined;
		intermission?: boolean | undefined;
	}>>;
	mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
	cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
	not_req: z.ZodOptional<z.ZodBoolean>;
	repeatable: z.ZodOptional<z.ZodBoolean>;
	times_taken: z.ZodOptional<z.ZodNumber>;
	keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
	stars: z.ZodOptional<z.ZodNumber>;
	highlight: z.ZodOptional<z.ZodEnum<[
		"red",
		"dark_red",
		"orange",
		"dark_orange",
		"green",
		"dark_green",
		"blue",
		"dark_blue",
		"gray",
		"dark_gray"
	]>>;
}, "strip", z.ZodTypeAny, {
	path?: string | undefined;
	range?: string | undefined;
	activation?: string | undefined;
	expedited?: string | undefined;
	flavor?: string | undefined;
	purchase?: string | undefined;
	unlocks?: string | undefined;
	partial_unlocks?: string | undefined;
	prereq?: string | undefined;
	build_dc?: string | undefined;
	build_time?: string | undefined;
	cost?: {
		hp?: number | undefined;
		mp?: number | undefined;
		vim?: number | undefined;
		hero?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		attack?: boolean | undefined;
		passive?: boolean | undefined;
		respite?: boolean | undefined;
		rest?: boolean | undefined;
		intermission?: boolean | undefined;
	} | undefined;
	mp_cost?: number[] | undefined;
	cast_dl?: number[] | undefined;
	not_req?: boolean | undefined;
	repeatable?: boolean | undefined;
	times_taken?: number | undefined;
	keys?: Record<string, string> | undefined;
	stars?: number | undefined;
	highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
}, {
	path?: string | undefined;
	range?: string | undefined;
	activation?: string | undefined;
	expedited?: string | undefined;
	flavor?: string | undefined;
	purchase?: string | undefined;
	unlocks?: string | undefined;
	partial_unlocks?: string | undefined;
	prereq?: string | undefined;
	build_dc?: string | undefined;
	build_time?: string | undefined;
	cost?: {
		hp?: number | undefined;
		mp?: number | undefined;
		vim?: number | undefined;
		hero?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		attack?: boolean | undefined;
		passive?: boolean | undefined;
		respite?: boolean | undefined;
		rest?: boolean | undefined;
		intermission?: boolean | undefined;
	} | undefined;
	mp_cost?: number[] | undefined;
	cast_dl?: number[] | undefined;
	not_req?: boolean | undefined;
	repeatable?: boolean | undefined;
	times_taken?: number | undefined;
	keys?: Record<string, string> | undefined;
	stars?: number | undefined;
	highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
}>;
export declare const abilityFieldsNameValidator: z.ZodEnum<[
	"path",
	"keys",
	"range",
	"activation",
	"expedited",
	"flavor",
	"purchase",
	"unlocks",
	"partial_unlocks",
	"prereq",
	"build_dc",
	"build_time",
	"cost",
	"mp_cost",
	"cast_dl",
	"not_req",
	"repeatable",
	"times_taken",
	"stars",
	"highlight"
]>;
export declare const abilityValidator: z.ZodObject<{
	name: z.ZodString;
	effect: z.ZodString;
	custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		path: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		activation: z.ZodOptional<z.ZodString>;
		expedited: z.ZodOptional<z.ZodString>;
		flavor: z.ZodOptional<z.ZodString>;
		purchase: z.ZodOptional<z.ZodString>;
		unlocks: z.ZodOptional<z.ZodString>;
		partial_unlocks: z.ZodOptional<z.ZodString>;
		prereq: z.ZodOptional<z.ZodString>;
		build_dc: z.ZodOptional<z.ZodString>;
		build_time: z.ZodOptional<z.ZodString>;
		cost: z.ZodOptional<z.ZodObject<{
			hp: z.ZodOptional<z.ZodNumber>;
			mp: z.ZodOptional<z.ZodNumber>;
			vim: z.ZodOptional<z.ZodNumber>;
			hero: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			attack: z.ZodOptional<z.ZodBoolean>;
			passive: z.ZodOptional<z.ZodBoolean>;
			respite: z.ZodOptional<z.ZodBoolean>;
			rest: z.ZodOptional<z.ZodBoolean>;
			intermission: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}>>;
		mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		not_req: z.ZodOptional<z.ZodBoolean>;
		repeatable: z.ZodOptional<z.ZodBoolean>;
		times_taken: z.ZodOptional<z.ZodNumber>;
		keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
		stars: z.ZodOptional<z.ZodNumber>;
		highlight: z.ZodOptional<z.ZodEnum<[
			"red",
			"dark_red",
			"orange",
			"dark_orange",
			"green",
			"dark_green",
			"blue",
			"dark_blue",
			"gray",
			"dark_gray"
		]>>;
	}, "strip", z.ZodTypeAny, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}>>>;
	uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>;
	comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
	active: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
	name: string;
	effect: string;
	active: boolean;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
}, {
	name: string;
	effect: string;
	active: boolean;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
}>;
export declare const partialAbilityValidator: z.ZodEffects<z.ZodObject<{
	name: z.ZodOptional<z.ZodString>;
	effect: z.ZodOptional<z.ZodString>;
	custom_fields: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		path: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		activation: z.ZodOptional<z.ZodString>;
		expedited: z.ZodOptional<z.ZodString>;
		flavor: z.ZodOptional<z.ZodString>;
		purchase: z.ZodOptional<z.ZodString>;
		unlocks: z.ZodOptional<z.ZodString>;
		partial_unlocks: z.ZodOptional<z.ZodString>;
		prereq: z.ZodOptional<z.ZodString>;
		build_dc: z.ZodOptional<z.ZodString>;
		build_time: z.ZodOptional<z.ZodString>;
		cost: z.ZodOptional<z.ZodObject<{
			hp: z.ZodOptional<z.ZodNumber>;
			mp: z.ZodOptional<z.ZodNumber>;
			vim: z.ZodOptional<z.ZodNumber>;
			hero: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			attack: z.ZodOptional<z.ZodBoolean>;
			passive: z.ZodOptional<z.ZodBoolean>;
			respite: z.ZodOptional<z.ZodBoolean>;
			rest: z.ZodOptional<z.ZodBoolean>;
			intermission: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}>>;
		mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		not_req: z.ZodOptional<z.ZodBoolean>;
		repeatable: z.ZodOptional<z.ZodBoolean>;
		times_taken: z.ZodOptional<z.ZodNumber>;
		keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
		stars: z.ZodOptional<z.ZodNumber>;
		highlight: z.ZodOptional<z.ZodEnum<[
			"red",
			"dark_red",
			"orange",
			"dark_orange",
			"green",
			"dark_green",
			"blue",
			"dark_blue",
			"gray",
			"dark_gray"
		]>>;
	}, "strip", z.ZodTypeAny, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}>>>>;
	uses: z.ZodOptional<z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>>;
	comment: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
	active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	name?: string | undefined;
	effect?: string | undefined;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}, {
	name?: string | undefined;
	effect?: string | undefined;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}>, {
	name?: string | undefined;
	effect?: string | undefined;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}, {
	name?: string | undefined;
	effect?: string | undefined;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}>;
export declare const fullAbilityValidator: z.ZodObject<{
	name: z.ZodString;
	effect: z.ZodString;
	custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		path: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		activation: z.ZodOptional<z.ZodString>;
		expedited: z.ZodOptional<z.ZodString>;
		flavor: z.ZodOptional<z.ZodString>;
		purchase: z.ZodOptional<z.ZodString>;
		unlocks: z.ZodOptional<z.ZodString>;
		partial_unlocks: z.ZodOptional<z.ZodString>;
		prereq: z.ZodOptional<z.ZodString>;
		build_dc: z.ZodOptional<z.ZodString>;
		build_time: z.ZodOptional<z.ZodString>;
		cost: z.ZodOptional<z.ZodObject<{
			hp: z.ZodOptional<z.ZodNumber>;
			mp: z.ZodOptional<z.ZodNumber>;
			vim: z.ZodOptional<z.ZodNumber>;
			hero: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			attack: z.ZodOptional<z.ZodBoolean>;
			passive: z.ZodOptional<z.ZodBoolean>;
			respite: z.ZodOptional<z.ZodBoolean>;
			rest: z.ZodOptional<z.ZodBoolean>;
			intermission: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}, {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		}>>;
		mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
		not_req: z.ZodOptional<z.ZodBoolean>;
		repeatable: z.ZodOptional<z.ZodBoolean>;
		times_taken: z.ZodOptional<z.ZodNumber>;
		keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
		stars: z.ZodOptional<z.ZodNumber>;
		highlight: z.ZodOptional<z.ZodEnum<[
			"red",
			"dark_red",
			"orange",
			"dark_orange",
			"green",
			"dark_green",
			"blue",
			"dark_blue",
			"gray",
			"dark_gray"
		]>>;
	}, "strip", z.ZodTypeAny, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}, {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	}>>>;
	uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>;
	comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
	active: z.ZodBoolean;
	id: z.ZodString;
	entity_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
	name: string;
	effect: string;
	active: boolean;
	id: string;
	entity_id: string;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
}, {
	name: string;
	effect: string;
	active: boolean;
	id: string;
	entity_id: string;
	custom_fields?: {
		path?: string | undefined;
		range?: string | undefined;
		activation?: string | undefined;
		expedited?: string | undefined;
		flavor?: string | undefined;
		purchase?: string | undefined;
		unlocks?: string | undefined;
		partial_unlocks?: string | undefined;
		prereq?: string | undefined;
		build_dc?: string | undefined;
		build_time?: string | undefined;
		cost?: {
			hp?: number | undefined;
			mp?: number | undefined;
			vim?: number | undefined;
			hero?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			attack?: boolean | undefined;
			passive?: boolean | undefined;
			respite?: boolean | undefined;
			rest?: boolean | undefined;
			intermission?: boolean | undefined;
		} | undefined;
		mp_cost?: number[] | undefined;
		cast_dl?: number[] | undefined;
		not_req?: boolean | undefined;
		repeatable?: boolean | undefined;
		times_taken?: number | undefined;
		keys?: Record<string, string> | undefined;
		stars?: number | undefined;
		highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
}>;
export type UncompleteEntityAbility = z.infer<typeof abilityValidator>;
export type FullEntityAbility = z.infer<typeof fullAbilityValidator>;
export type EntityAbility = UncompleteEntityAbility | FullEntityAbility;
export type PartialEntityAbility = z.infer<typeof partialAbilityValidator>;
export type AbilityCostMapNumber = z.infer<typeof abilityCostNumberValidator>;
export type AbilityCostMapBoolean = z.infer<typeof abilityCostBooleanValidator>;
export type AbilityCostMap = z.infer<typeof abilityCostValidator>;
export type EntityAbilityFieldsStrings = z.infer<typeof abilityFieldsValidatorStrings>;
export type EntityAbilityFields = z.infer<typeof abilityFieldsNameValidator>;
export declare const postAbilitiesResponseValidator: z.ZodObject<{
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export declare const patchAbilityResponseValidator: z.ZodObject<{
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
	ability: z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>;
}, "strip", z.ZodTypeAny, {
	ability: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	};
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	ability: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	};
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export type PostAbilitiesResponse = z.infer<typeof postAbilitiesResponseValidator>;
export type PatchAbilityResponse = z.infer<typeof patchAbilityResponseValidator>;
export declare const ITEM_TYPE_EQUIPMENT = "equipment";
export declare const ITEM_TYPE_CONSUMABLE = "consumable";
export declare const ITEM_TYPE_CONTAINER = "container";
export declare const ITEM_TYPE_ARMOR = "armor";
export declare const ITEM_TYPE_SHIELD = "shield";
export declare const ITEM_TYPE_WEAPON = "weapon";
export declare const itemTypeValidator: z.ZodEnum<[
	"equipment",
	"consumable",
	"container",
	"armor",
	"shield",
	"weapon"
]>;
export declare const itemValidator: z.ZodObject<{
	name: z.ZodString;
	bulk: z.ZodNumber;
	desc: z.ZodString;
	type: z.ZodEnum<[
		"equipment",
		"consumable",
		"container",
		"armor",
		"shield",
		"weapon"
	]>;
	custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		attr: z.ZodOptional<z.ZodString>;
		category: z.ZodOptional<z.ZodString>;
		courses: z.ZodOptional<z.ZodString>;
		dmg: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		special: z.ZodOptional<z.ZodString>;
		weapon_type: z.ZodOptional<z.ZodString>;
		dc_cost: z.ZodOptional<z.ZodNumber>;
		in_storage: z.ZodOptional<z.ZodBoolean>;
		not_evadable: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}>>>;
	uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>;
	comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
	active: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	name: string;
	active: boolean;
	bulk: number;
	desc: string;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
}, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	name: string;
	active: boolean;
	bulk: number;
	desc: string;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
}>;
export declare const partialItemValidator: z.ZodEffects<z.ZodObject<{
	name: z.ZodOptional<z.ZodString>;
	bulk: z.ZodOptional<z.ZodNumber>;
	desc: z.ZodOptional<z.ZodString>;
	type: z.ZodOptional<z.ZodEnum<[
		"equipment",
		"consumable",
		"container",
		"armor",
		"shield",
		"weapon"
	]>>;
	custom_fields: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		attr: z.ZodOptional<z.ZodString>;
		category: z.ZodOptional<z.ZodString>;
		courses: z.ZodOptional<z.ZodString>;
		dmg: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		special: z.ZodOptional<z.ZodString>;
		weapon_type: z.ZodOptional<z.ZodString>;
		dc_cost: z.ZodOptional<z.ZodNumber>;
		in_storage: z.ZodOptional<z.ZodBoolean>;
		not_evadable: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}>>>>;
	uses: z.ZodOptional<z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>>;
	comment: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
	active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	name?: string | undefined;
	bulk?: number | undefined;
	desc?: string | undefined;
	type?: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon" | undefined;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}, {
	name?: string | undefined;
	bulk?: number | undefined;
	desc?: string | undefined;
	type?: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon" | undefined;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}>, {
	name?: string | undefined;
	bulk?: number | undefined;
	desc?: string | undefined;
	type?: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon" | undefined;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}, {
	name?: string | undefined;
	bulk?: number | undefined;
	desc?: string | undefined;
	type?: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon" | undefined;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
	active?: boolean | undefined;
}>;
export declare const fullItemValidator: z.ZodObject<{
	type: z.ZodEnum<[
		"equipment",
		"consumable",
		"container",
		"armor",
		"shield",
		"weapon"
	]>;
	name: z.ZodString;
	custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		attr: z.ZodOptional<z.ZodString>;
		category: z.ZodOptional<z.ZodString>;
		courses: z.ZodOptional<z.ZodString>;
		dmg: z.ZodOptional<z.ZodString>;
		range: z.ZodOptional<z.ZodString>;
		special: z.ZodOptional<z.ZodString>;
		weapon_type: z.ZodOptional<z.ZodString>;
		dc_cost: z.ZodOptional<z.ZodNumber>;
		in_storage: z.ZodOptional<z.ZodBoolean>;
		not_evadable: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}, {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	}>>>;
	uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>;
	comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
	active: z.ZodBoolean;
	bulk: z.ZodNumber;
	desc: z.ZodString;
	id: z.ZodString;
	entity_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	name: string;
	active: boolean;
	id: string;
	entity_id: string;
	bulk: number;
	desc: string;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
	comment?: string | null | undefined;
}, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	name: string;
	active: boolean;
	id: string;
	entity_id: string;
	bulk: number;
	desc: string;
	custom_fields?: {
		attr?: string | undefined;
		category?: string | undefined;
		courses?: string | undefined;
		dmg?: string | undefined;
		range?: string | undefined;
		special?: string | undefined;
		weapon_type?: string | undefined;
		dc_cost?: number | undefined;
		in_storage?: boolean | undefined;
		not_evadable?: boolean | undefined;
	} | null | undefined;
	uses?: unknown;
	comment?: string | null | undefined;
}>;
export type EntityItemType = z.infer<typeof itemTypeValidator>;
export type UncompleteEntityItem = z.infer<typeof itemValidator>;
export type FullEntityItem = z.infer<typeof fullItemValidator>;
export type EntityItem = UncompleteEntityItem | FullEntityItem;
export type PartialEntityItem = z.infer<typeof partialItemValidator>;
export declare const postItemsResponseValidator: z.ZodObject<{
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
	items: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		name: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export declare const patchItemResponseValidator: z.ZodObject<{
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
	item: z.ZodObject<{
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		name: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>;
}, "strip", z.ZodTypeAny, {
	item: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	};
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	item: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	};
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export type PostItemsResponse = z.infer<typeof postItemsResponseValidator>;
export type PatchItemResponse = z.infer<typeof patchItemResponseValidator>;
export declare const attributeChangelogValidator: z.ZodObject<{
	attr: z.ZodString;
	msg: z.ZodString;
	prev: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
	attr: string;
	msg: string;
	prev?: number | null | undefined;
}, {
	attr: string;
	msg: string;
	prev?: number | null | undefined;
}>;
export declare const fullAttributeChangelogValidator: z.ZodObject<{
	attr: z.ZodString;
	msg: z.ZodString;
	prev: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
	id: z.ZodString;
	entity_id: z.ZodString;
	time: z.ZodString;
}, "strip", z.ZodTypeAny, {
	attr: string;
	time: string;
	id: string;
	entity_id: string;
	msg: string;
	prev?: number | null | undefined;
}, {
	attr: string;
	time: string;
	id: string;
	entity_id: string;
	msg: string;
	prev?: number | null | undefined;
}>;
export declare const adjustAttributesValidator: z.ZodObject<{
	message: z.ZodOptional<z.ZodString>;
	attributes: z.ZodEffects<z.ZodObject<{
		agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		hp: z.ZodOptional<z.ZodNumber>;
		max_hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		max_mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		max_vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		init: z.ZodOptional<z.ZodNumber>;
		speed: z.ZodOptional<z.ZodNumber>;
		xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	}, "strip", z.ZodNumber, z.objectOutputType<{
		agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		hp: z.ZodOptional<z.ZodNumber>;
		max_hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		max_mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		max_vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		init: z.ZodOptional<z.ZodNumber>;
		speed: z.ZodOptional<z.ZodNumber>;
		xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		hp: z.ZodOptional<z.ZodNumber>;
		max_hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		max_mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		max_vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		init: z.ZodOptional<z.ZodNumber>;
		speed: z.ZodOptional<z.ZodNumber>;
		xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	}, z.ZodNumber, "strip">>, z.objectOutputType<{
		agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		hp: z.ZodOptional<z.ZodNumber>;
		max_hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		max_mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		max_vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		init: z.ZodOptional<z.ZodNumber>;
		speed: z.ZodOptional<z.ZodNumber>;
		xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		cha: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		dex: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		int: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		per: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		spi: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		str: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		tek: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		wis: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
		hp: z.ZodOptional<z.ZodNumber>;
		max_hp: z.ZodOptional<z.ZodNumber>;
		mp: z.ZodOptional<z.ZodNumber>;
		max_mp: z.ZodOptional<z.ZodNumber>;
		vim: z.ZodOptional<z.ZodNumber>;
		max_vim: z.ZodOptional<z.ZodNumber>;
		hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_hero: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		init: z.ZodOptional<z.ZodNumber>;
		speed: z.ZodOptional<z.ZodNumber>;
		xp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sp: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		armor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burden: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		casting: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		l: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		radius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reach: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shield: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bluespace: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_trii: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		free_hands: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		carrying_capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		max_alerts: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		recovery_shock: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		actions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		reactions_on_turn: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		aggressive_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		arcane_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		balanced_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		blade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bow_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brawling_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		brutal_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cannon_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		great_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		grenade_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		hookwhip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		improvised_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		polearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		protector_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		rifle_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		shotgun_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		sidearm_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		thrown_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tinkertech_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		unarmed_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_acc: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		whip_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		fall_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		vim_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burn_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleed_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		attribute_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		magical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		physical_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		piercing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		slashing_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		burning: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		bleeding: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		paralysis: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		stun: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		agi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		cha_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		dex_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		int_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		per_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		spi_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		str_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		tek_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
		wis_dmg: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
	}, z.ZodNumber, "strip">>;
}, "strip", z.ZodTypeAny, {
	attributes: {
		agi?: number | undefined;
		cha?: number | undefined;
		dex?: number | undefined;
		int?: number | undefined;
		per?: number | undefined;
		spi?: number | undefined;
		str?: number | undefined;
		tek?: number | undefined;
		wis?: number | undefined;
		hp?: number | undefined;
		max_hp?: number | undefined;
		mp?: number | undefined;
		max_mp?: number | undefined;
		vim?: number | undefined;
		max_vim?: number | undefined;
		hero?: number | undefined;
		max_hero?: number | undefined;
		init?: number | undefined;
		speed?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	message?: string | undefined;
}, {
	attributes: {
		agi?: number | undefined;
		cha?: number | undefined;
		dex?: number | undefined;
		int?: number | undefined;
		per?: number | undefined;
		spi?: number | undefined;
		str?: number | undefined;
		tek?: number | undefined;
		wis?: number | undefined;
		hp?: number | undefined;
		max_hp?: number | undefined;
		mp?: number | undefined;
		max_mp?: number | undefined;
		vim?: number | undefined;
		max_vim?: number | undefined;
		hero?: number | undefined;
		max_hero?: number | undefined;
		init?: number | undefined;
		speed?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	message?: string | undefined;
}>;
export declare const filterChangelogValidator: z.ZodObject<{
	attributes: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	attributes: string[];
}, {
	attributes: string[];
}>;
export type UncompleteEntityChangelog = z.infer<typeof attributeChangelogValidator>;
export type FullEntityChangelog = z.infer<typeof fullAttributeChangelogValidator>;
export type EntityChangelog = UncompleteEntityChangelog | FullEntityChangelog;
export type UpdateEntityAttributes = z.infer<typeof adjustAttributesValidator>;
export type FilterChangelogBody = z.infer<typeof filterChangelogValidator>;
export declare const COG_ATTRIBUTE_LEVELS: readonly [
	"weak",
	"moderate",
	"strong",
	"exceptional"
];
export declare const cogAttributeLevelValidator: z.ZodEnum<[
	"weak",
	"moderate",
	"strong",
	"exceptional"
]>;
export declare const cogCreateOptionsValidator: z.ZodObject<{
	name: z.ZodString;
	level: z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>;
	type: z.ZodString;
	desc: z.ZodString;
	attrOverrides: z.ZodRecord<z.ZodEnum<[
		"per",
		"tek",
		"agi",
		"dex",
		"int",
		"spi",
		"str",
		"wis",
		"cha"
	]>, z.ZodEnum<[
		"weak",
		"moderate",
		"strong",
		"exceptional"
	]>>;
	abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
	variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>>;
}, "strip", z.ZodTypeAny, {
	type: string;
	name: string;
	desc: string;
	level: string | number;
	attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
	abilitySelection: Record<string, string>;
	variableAbilityCost: Record<string, string | number>;
}, {
	type: string;
	name: string;
	desc: string;
	level: string | number;
	attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
	abilitySelection: Record<string, string>;
	variableAbilityCost: Record<string, string | number>;
}>;
export type CogAttributeLevel = z.infer<typeof cogAttributeLevelValidator>;
export type CogCreateOptions = z.infer<typeof cogCreateOptionsValidator>;
export declare const giftValidator: z.ZodEnum<[
	"Alertness",
	"Craft",
	"Alacrity",
	"Finesse",
	"Mind",
	"Magic",
	"Rage",
	"Science",
	"Charm",
	"None"
]>;
export declare const entityTypeValidator: z.ZodEnum<[
	"CHARACTER",
	"COG"
]>;
export declare const disabledActionsValidator: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
	msg: z.ZodString;
	icon: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	msg: string;
	icon?: string | undefined;
}, {
	msg: string;
	icon?: string | undefined;
}>, "many">>;
export declare const otherAttributesValidator: z.ZodObject<{
	gift: z.ZodOptional<z.ZodEnum<[
		"Alertness",
		"Craft",
		"Alacrity",
		"Finesse",
		"Mind",
		"Magic",
		"Rage",
		"Science",
		"Charm",
		"None"
	]>>;
	second_gift: z.ZodOptional<z.ZodEnum<[
		"Alertness",
		"Craft",
		"Alacrity",
		"Finesse",
		"Mind",
		"Magic",
		"Rage",
		"Science",
		"Charm",
		"None"
	]>>;
	cog_type: z.ZodOptional<z.ZodString>;
	cog_creation_options: z.ZodOptional<z.ZodObject<{
		name: z.ZodString;
		level: z.ZodUnion<[
			z.ZodString,
			z.ZodNumber
		]>;
		type: z.ZodString;
		desc: z.ZodString;
		attrOverrides: z.ZodRecord<z.ZodEnum<[
			"per",
			"tek",
			"agi",
			"dex",
			"int",
			"spi",
			"str",
			"wis",
			"cha"
		]>, z.ZodEnum<[
			"weak",
			"moderate",
			"strong",
			"exceptional"
		]>>;
		abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
		variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
			z.ZodString,
			z.ZodNumber
		]>>;
	}, "strip", z.ZodTypeAny, {
		type: string;
		name: string;
		desc: string;
		level: string | number;
		attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
		abilitySelection: Record<string, string>;
		variableAbilityCost: Record<string, string | number>;
	}, {
		type: string;
		name: string;
		desc: string;
		level: string | number;
		attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
		abilitySelection: Record<string, string>;
		variableAbilityCost: Record<string, string | number>;
	}>>;
	dice_settings: z.ZodOptional<z.ZodObject<{
		explodes: z.ZodOptional<z.ZodBoolean>;
		rr1s: z.ZodOptional<z.ZodBoolean>;
		drop: z.ZodOptional<z.ZodNumber>;
		fatigued: z.ZodOptional<z.ZodBoolean>;
		end: z.ZodOptional<z.ZodString>;
		flow: z.ZodOptional<z.ZodNumber>;
		ebb: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			toggled: z.ZodBoolean;
		}, "strip", z.ZodTypeAny, {
			toggled: boolean;
		}, {
			toggled: boolean;
		}>>>;
		adjust: z.ZodOptional<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>>;
		count: z.ZodOptional<z.ZodNumber>;
		sides: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}, {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	}>>;
	in_combat: z.ZodOptional<z.ZodBoolean>;
	disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
		msg: z.ZodString;
		icon: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		msg: string;
		icon?: string | undefined;
	}, {
		msg: string;
		icon?: string | undefined;
	}>, "many">>>;
}, "strip", z.ZodTypeAny, {
	gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
	second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
	cog_type?: string | undefined;
	cog_creation_options?: {
		type: string;
		name: string;
		desc: string;
		level: string | number;
		attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
		abilitySelection: Record<string, string>;
		variableAbilityCost: Record<string, string | number>;
	} | undefined;
	dice_settings?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
	in_combat?: boolean | undefined;
	disabled_actions?: Record<string, {
		msg: string;
		icon?: string | undefined;
	}[]> | undefined;
}, {
	gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
	second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
	cog_type?: string | undefined;
	cog_creation_options?: {
		type: string;
		name: string;
		desc: string;
		level: string | number;
		attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
		abilitySelection: Record<string, string>;
		variableAbilityCost: Record<string, string | number>;
	} | undefined;
	dice_settings?: {
		explodes?: boolean | undefined;
		rr1s?: boolean | undefined;
		drop?: number | undefined;
		fatigued?: boolean | undefined;
		end?: string | undefined;
		flow?: number | undefined;
		ebb?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		otherToggles?: Record<string, {
			toggled: boolean;
		}> | undefined;
		adjust?: string | number | undefined;
		count?: number | undefined;
		sides?: number | undefined;
	} | undefined;
	in_combat?: boolean | undefined;
	disabled_actions?: Record<string, {
		msg: string;
		icon?: string | undefined;
	}[]> | undefined;
}>;
export declare const entityValidator: z.ZodObject<{
	name: z.ZodString;
	type: z.ZodEnum<[
		"CHARACTER",
		"COG"
	]>;
	attributes: z.ZodObject<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodNumber, z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">>;
	other_fields: z.ZodObject<{
		gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		second_gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		cog_type: z.ZodOptional<z.ZodString>;
		cog_creation_options: z.ZodOptional<z.ZodObject<{
			name: z.ZodString;
			level: z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>;
			type: z.ZodString;
			desc: z.ZodString;
			attrOverrides: z.ZodRecord<z.ZodEnum<[
				"per",
				"tek",
				"agi",
				"dex",
				"int",
				"spi",
				"str",
				"wis",
				"cha"
			]>, z.ZodEnum<[
				"weak",
				"moderate",
				"strong",
				"exceptional"
			]>>;
			abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
			variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}>>;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		in_combat: z.ZodOptional<z.ZodBoolean>;
		disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
			msg: z.ZodString;
			icon: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			msg: string;
			icon?: string | undefined;
		}, {
			msg: string;
			icon?: string | undefined;
		}>, "many">>>;
	}, "strip", z.ZodTypeAny, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}>;
	public: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	type: "CHARACTER" | "COG";
	name: string;
	attributes: {
		per: number;
		tek: number;
		agi: number;
		dex: number;
		int: number;
		spi: number;
		str: number;
		wis: number;
		cha: number;
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	public: boolean;
}, {
	type: "CHARACTER" | "COG";
	name: string;
	attributes: {
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		agi?: number | undefined;
		cha?: number | undefined;
		dex?: number | undefined;
		int?: number | undefined;
		per?: number | undefined;
		spi?: number | undefined;
		str?: number | undefined;
		tek?: number | undefined;
		wis?: number | undefined;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	public?: boolean | undefined;
}>;
export declare const fullEntityValidator: z.ZodObject<{
	type: z.ZodEnum<[
		"CHARACTER",
		"COG"
	]>;
	name: z.ZodString;
	attributes: z.ZodObject<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodNumber, z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">>;
	other_fields: z.ZodObject<{
		gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		second_gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		cog_type: z.ZodOptional<z.ZodString>;
		cog_creation_options: z.ZodOptional<z.ZodObject<{
			name: z.ZodString;
			level: z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>;
			type: z.ZodString;
			desc: z.ZodString;
			attrOverrides: z.ZodRecord<z.ZodEnum<[
				"per",
				"tek",
				"agi",
				"dex",
				"int",
				"spi",
				"str",
				"wis",
				"cha"
			]>, z.ZodEnum<[
				"weak",
				"moderate",
				"strong",
				"exceptional"
			]>>;
			abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
			variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}>>;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		in_combat: z.ZodOptional<z.ZodBoolean>;
		disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
			msg: z.ZodString;
			icon: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			msg: string;
			icon?: string | undefined;
		}, {
			msg: string;
			icon?: string | undefined;
		}>, "many">>>;
	}, "strip", z.ZodTypeAny, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}>;
	public: z.ZodDefault<z.ZodBoolean>;
	id: z.ZodString;
	owner: z.ZodString;
	computed_attributes: z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
}, "strip", z.ZodTypeAny, {
	type: "CHARACTER" | "COG";
	name: string;
	id: string;
	attributes: {
		per: number;
		tek: number;
		agi: number;
		dex: number;
		int: number;
		spi: number;
		str: number;
		wis: number;
		cha: number;
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	public: boolean;
	owner: string;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	type: "CHARACTER" | "COG";
	name: string;
	id: string;
	attributes: {
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		agi?: number | undefined;
		cha?: number | undefined;
		dex?: number | undefined;
		int?: number | undefined;
		per?: number | undefined;
		spi?: number | undefined;
		str?: number | undefined;
		tek?: number | undefined;
		wis?: number | undefined;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	owner: string;
	public?: boolean | undefined;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export declare const partialEntityValidator: z.ZodEffects<z.ZodObject<{
	type: z.ZodOptional<z.ZodEnum<[
		"CHARACTER",
		"COG"
	]>>;
	computed_attributes: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>>;
	name: z.ZodOptional<z.ZodString>;
	attributes: z.ZodOptional<z.ZodObject<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodNumber, z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">>>;
	other_fields: z.ZodOptional<z.ZodObject<{
		gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		second_gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		cog_type: z.ZodOptional<z.ZodString>;
		cog_creation_options: z.ZodOptional<z.ZodObject<{
			name: z.ZodString;
			level: z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>;
			type: z.ZodString;
			desc: z.ZodString;
			attrOverrides: z.ZodRecord<z.ZodEnum<[
				"per",
				"tek",
				"agi",
				"dex",
				"int",
				"spi",
				"str",
				"wis",
				"cha"
			]>, z.ZodEnum<[
				"weak",
				"moderate",
				"strong",
				"exceptional"
			]>>;
			abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
			variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}>>;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		in_combat: z.ZodOptional<z.ZodBoolean>;
		disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
			msg: z.ZodString;
			icon: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			msg: string;
			icon?: string | undefined;
		}, {
			msg: string;
			icon?: string | undefined;
		}>, "many">>>;
	}, "strip", z.ZodTypeAny, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}>>;
	public: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
	owner: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	type?: "CHARACTER" | "COG" | undefined;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
	name?: string | undefined;
	attributes?: z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip"> | undefined;
	other_fields?: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	} | undefined;
	public?: boolean | undefined;
	owner?: string | undefined;
}, {
	type?: "CHARACTER" | "COG" | undefined;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
	name?: string | undefined;
	attributes?: z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip"> | undefined;
	other_fields?: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	} | undefined;
	public?: boolean | undefined;
	owner?: string | undefined;
}>, {
	type?: "CHARACTER" | "COG" | undefined;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
	name?: string | undefined;
	attributes?: z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip"> | undefined;
	other_fields?: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	} | undefined;
	public?: boolean | undefined;
	owner?: string | undefined;
}, {
	type?: "CHARACTER" | "COG" | undefined;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
	name?: string | undefined;
	attributes?: z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip"> | undefined;
	other_fields?: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	} | undefined;
	public?: boolean | undefined;
	owner?: string | undefined;
}>;
export type CharacterGift = z.infer<typeof giftValidator>;
export type EntityType = z.infer<typeof entityTypeValidator>;
export type DisabledActions = z.infer<typeof disabledActionsValidator>;
export type EntityFields = z.infer<typeof otherAttributesValidator>;
export type UncompleteEntity = z.infer<typeof entityValidator>;
export type FullEntity = z.infer<typeof fullEntityValidator>;
export type Entity = UncompleteEntity | FullEntity;
export type PartialEntity = z.infer<typeof partialEntityValidator>;
export declare const fluxTypeValidator: z.ZodEnum<[
	"QUEST",
	"TIDE",
	"GRATE",
	"DAM",
	"EFFLUENT",
	"DELTA"
]>;
export declare const fluxMetadataValidator: z.ZodObject<{
	effect: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	effect?: string | undefined;
}, {
	effect?: string | undefined;
}>;
export declare const entityFluxValidator: z.ZodObject<{
	type: z.ZodEnum<[
		"QUEST",
		"TIDE",
		"GRATE",
		"DAM",
		"EFFLUENT",
		"DELTA"
	]>;
	text: z.ZodString;
	metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		effect: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		effect?: string | undefined;
	}, {
		effect?: string | undefined;
	}>>>;
}, "strip", z.ZodTypeAny, {
	type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
	text: string;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}, {
	type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
	text: string;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}>;
export declare const fullEntityFluxValidator: z.ZodObject<{
	type: z.ZodEnum<[
		"QUEST",
		"TIDE",
		"GRATE",
		"DAM",
		"EFFLUENT",
		"DELTA"
	]>;
	text: z.ZodString;
	metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
		effect: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		effect?: string | undefined;
	}, {
		effect?: string | undefined;
	}>>>;
	id: z.ZodString;
	entity_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
	text: string;
	id: string;
	entity_id: string;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}, {
	type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
	text: string;
	id: string;
	entity_id: string;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}>;
export declare const partialEntityFluxValidator: z.ZodEffects<z.ZodObject<{
	type: z.ZodOptional<z.ZodEnum<[
		"QUEST",
		"TIDE",
		"GRATE",
		"DAM",
		"EFFLUENT",
		"DELTA"
	]>>;
	text: z.ZodOptional<z.ZodString>;
	metadata: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		effect: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		effect?: string | undefined;
	}, {
		effect?: string | undefined;
	}>>>>;
}, "strip", z.ZodTypeAny, {
	type?: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA" | undefined;
	text?: string | undefined;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}, {
	type?: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA" | undefined;
	text?: string | undefined;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}>, {
	type?: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA" | undefined;
	text?: string | undefined;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}, {
	type?: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA" | undefined;
	text?: string | undefined;
	metadata?: {
		effect?: string | undefined;
	} | null | undefined;
}>;
export type EntityFluxType = z.infer<typeof fluxTypeValidator>;
export type UncompleteEntityFlux = z.infer<typeof entityFluxValidator>;
export type FullEntityFlux = z.infer<typeof fullEntityFluxValidator>;
export type PartialEntityFlux = z.infer<typeof partialEntityFluxValidator>;
export declare const entityTextKeyValidator: z.ZodEnum<[
	"NOTES",
	"DESC",
	"BACKSTORY"
]>;
export declare const entityTextTextValidator: z.ZodObject<{
	text: z.ZodString;
}, "strip", z.ZodTypeAny, {
	text: string;
}, {
	text: string;
}>;
export declare const entityTextPermissionValidator: z.ZodObject<{
	public: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
	public: boolean;
}, {
	public?: boolean | undefined;
}>;
export declare const entityTextValidator: z.ZodObject<{
	text: z.ZodString;
	public: z.ZodDefault<z.ZodBoolean>;
	key: z.ZodEnum<[
		"NOTES",
		"DESC",
		"BACKSTORY"
	]>;
}, "strip", z.ZodTypeAny, {
	key: "NOTES" | "DESC" | "BACKSTORY";
	text: string;
	public: boolean;
}, {
	key: "NOTES" | "DESC" | "BACKSTORY";
	text: string;
	public?: boolean | undefined;
}>;
export declare const fullEntityTextValidator: z.ZodObject<{
	key: z.ZodEnum<[
		"NOTES",
		"DESC",
		"BACKSTORY"
	]>;
	text: z.ZodString;
	public: z.ZodDefault<z.ZodBoolean>;
	id: z.ZodString;
	entity_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
	key: "NOTES" | "DESC" | "BACKSTORY";
	text: string;
	id: string;
	entity_id: string;
	public: boolean;
}, {
	key: "NOTES" | "DESC" | "BACKSTORY";
	text: string;
	id: string;
	entity_id: string;
	public?: boolean | undefined;
}>;
export type EntityTextKey = z.infer<typeof entityTextKeyValidator>;
export type UncompleteEntityText = z.infer<typeof entityTextValidator>;
export type FullEntityText = z.infer<typeof fullEntityTextValidator>;
export declare const collectedEntityValidator: z.ZodObject<{
	entity: z.ZodObject<{
		name: z.ZodString;
		type: z.ZodEnum<[
			"CHARACTER",
			"COG"
		]>;
		attributes: z.ZodObject<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodNumber, z.objectOutputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">, z.objectInputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">>;
		other_fields: z.ZodObject<{
			gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			second_gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			cog_type: z.ZodOptional<z.ZodString>;
			cog_creation_options: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
				level: z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>;
				type: z.ZodString;
				desc: z.ZodString;
				attrOverrides: z.ZodRecord<z.ZodEnum<[
					"per",
					"tek",
					"agi",
					"dex",
					"int",
					"spi",
					"str",
					"wis",
					"cha"
				]>, z.ZodEnum<[
					"weak",
					"moderate",
					"strong",
					"exceptional"
				]>>;
				abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
				variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}>>;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			in_combat: z.ZodOptional<z.ZodBoolean>;
			disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
				msg: z.ZodString;
				icon: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				msg: string;
				icon?: string | undefined;
			}, {
				msg: string;
				icon?: string | undefined;
			}>, "many">>>;
		}, "strip", z.ZodTypeAny, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}>;
		public: z.ZodDefault<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
	}, {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public?: boolean | undefined;
	}>;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	items: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	text: z.ZodArray<z.ZodObject<{
		text: z.ZodString;
		public: z.ZodDefault<z.ZodBoolean>;
		key: z.ZodEnum<[
			"NOTES",
			"DESC",
			"BACKSTORY"
		]>;
	}, "strip", z.ZodTypeAny, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public: boolean;
	}, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public?: boolean | undefined;
	}>, "many">;
	flux: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"QUEST",
			"TIDE",
			"GRATE",
			"DAM",
			"EFFLUENT",
			"DELTA"
		]>;
		text: z.ZodString;
		metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			effect: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			effect?: string | undefined;
		}, {
			effect?: string | undefined;
		}>>>;
	}, "strip", z.ZodTypeAny, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public: boolean;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
}, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public?: boolean | undefined;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public?: boolean | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
}>;
export declare const fullCollectedEntityValidator: z.ZodObject<{
	entity: z.ZodObject<{
		type: z.ZodEnum<[
			"CHARACTER",
			"COG"
		]>;
		name: z.ZodString;
		attributes: z.ZodObject<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodNumber, z.objectOutputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">, z.objectInputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">>;
		other_fields: z.ZodObject<{
			gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			second_gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			cog_type: z.ZodOptional<z.ZodString>;
			cog_creation_options: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
				level: z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>;
				type: z.ZodString;
				desc: z.ZodString;
				attrOverrides: z.ZodRecord<z.ZodEnum<[
					"per",
					"tek",
					"agi",
					"dex",
					"int",
					"spi",
					"str",
					"wis",
					"cha"
				]>, z.ZodEnum<[
					"weak",
					"moderate",
					"strong",
					"exceptional"
				]>>;
				abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
				variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}>>;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			in_combat: z.ZodOptional<z.ZodBoolean>;
			disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
				msg: z.ZodString;
				icon: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				msg: string;
				icon?: string | undefined;
			}, {
				msg: string;
				icon?: string | undefined;
			}>, "many">>>;
		}, "strip", z.ZodTypeAny, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}>;
		public: z.ZodDefault<z.ZodBoolean>;
		id: z.ZodString;
		owner: z.ZodString;
		computed_attributes: z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			base: z.ZodOptional<z.ZodNumber>;
			val: z.ZodNumber;
			reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
				val: z.ZodNumber;
				src: z.ZodString;
				abilityId: z.ZodOptional<z.ZodString>;
				itemId: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}>, "many">>;
			dice: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}>>>>;
	}, "strip", z.ZodTypeAny, {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
		owner: string;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}, {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		public?: boolean | undefined;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}>;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	items: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		name: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	text: z.ZodArray<z.ZodObject<{
		key: z.ZodEnum<[
			"NOTES",
			"DESC",
			"BACKSTORY"
		]>;
		text: z.ZodString;
		public: z.ZodDefault<z.ZodBoolean>;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public: boolean;
	}, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public?: boolean | undefined;
	}>, "many">;
	flux: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"QUEST",
			"TIDE",
			"GRATE",
			"DAM",
			"EFFLUENT",
			"DELTA"
		]>;
		text: z.ZodString;
		metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			effect: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			effect?: string | undefined;
		}, {
			effect?: string | undefined;
		}>>>;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public: boolean;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
		owner: string;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
}, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public?: boolean | undefined;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		public?: boolean | undefined;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
}>;
export declare const collectedEntityWithChangelogValidator: z.ZodObject<{
	text: z.ZodArray<z.ZodObject<{
		text: z.ZodString;
		public: z.ZodDefault<z.ZodBoolean>;
		key: z.ZodEnum<[
			"NOTES",
			"DESC",
			"BACKSTORY"
		]>;
	}, "strip", z.ZodTypeAny, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public: boolean;
	}, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public?: boolean | undefined;
	}>, "many">;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	items: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	entity: z.ZodObject<{
		name: z.ZodString;
		type: z.ZodEnum<[
			"CHARACTER",
			"COG"
		]>;
		attributes: z.ZodObject<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodNumber, z.objectOutputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">, z.objectInputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">>;
		other_fields: z.ZodObject<{
			gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			second_gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			cog_type: z.ZodOptional<z.ZodString>;
			cog_creation_options: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
				level: z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>;
				type: z.ZodString;
				desc: z.ZodString;
				attrOverrides: z.ZodRecord<z.ZodEnum<[
					"per",
					"tek",
					"agi",
					"dex",
					"int",
					"spi",
					"str",
					"wis",
					"cha"
				]>, z.ZodEnum<[
					"weak",
					"moderate",
					"strong",
					"exceptional"
				]>>;
				abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
				variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}>>;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			in_combat: z.ZodOptional<z.ZodBoolean>;
			disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
				msg: z.ZodString;
				icon: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				msg: string;
				icon?: string | undefined;
			}, {
				msg: string;
				icon?: string | undefined;
			}>, "many">>>;
		}, "strip", z.ZodTypeAny, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}>;
		public: z.ZodDefault<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
	}, {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public?: boolean | undefined;
	}>;
	flux: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"QUEST",
			"TIDE",
			"GRATE",
			"DAM",
			"EFFLUENT",
			"DELTA"
		]>;
		text: z.ZodString;
		metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			effect: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			effect?: string | undefined;
		}, {
			effect?: string | undefined;
		}>>>;
	}, "strip", z.ZodTypeAny, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}>, "many">;
	changelog: z.ZodArray<z.ZodObject<{
		attr: z.ZodString;
		msg: z.ZodString;
		prev: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
	}, "strip", z.ZodTypeAny, {
		attr: string;
		msg: string;
		prev?: number | null | undefined;
	}, {
		attr: string;
		msg: string;
		prev?: number | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public: boolean;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
	changelog: {
		attr: string;
		msg: string;
		prev?: number | null | undefined;
	}[];
}, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		public?: boolean | undefined;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public?: boolean | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
	changelog: {
		attr: string;
		msg: string;
		prev?: number | null | undefined;
	}[];
}>;
export declare const fullCollectedEntityWithChangelogValidator: z.ZodObject<{
	text: z.ZodArray<z.ZodObject<{
		key: z.ZodEnum<[
			"NOTES",
			"DESC",
			"BACKSTORY"
		]>;
		text: z.ZodString;
		public: z.ZodDefault<z.ZodBoolean>;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public: boolean;
	}, {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public?: boolean | undefined;
	}>, "many">;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	items: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"equipment",
			"consumable",
			"container",
			"armor",
			"shield",
			"weapon"
		]>;
		name: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			dmg: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}, {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
		bulk: z.ZodNumber;
		desc: z.ZodString;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
	entity: z.ZodObject<{
		type: z.ZodEnum<[
			"CHARACTER",
			"COG"
		]>;
		name: z.ZodString;
		attributes: z.ZodObject<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodNumber, z.objectOutputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">, z.objectInputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">>;
		other_fields: z.ZodObject<{
			gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			second_gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			cog_type: z.ZodOptional<z.ZodString>;
			cog_creation_options: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
				level: z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>;
				type: z.ZodString;
				desc: z.ZodString;
				attrOverrides: z.ZodRecord<z.ZodEnum<[
					"per",
					"tek",
					"agi",
					"dex",
					"int",
					"spi",
					"str",
					"wis",
					"cha"
				]>, z.ZodEnum<[
					"weak",
					"moderate",
					"strong",
					"exceptional"
				]>>;
				abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
				variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}>>;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			in_combat: z.ZodOptional<z.ZodBoolean>;
			disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
				msg: z.ZodString;
				icon: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				msg: string;
				icon?: string | undefined;
			}, {
				msg: string;
				icon?: string | undefined;
			}>, "many">>>;
		}, "strip", z.ZodTypeAny, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}>;
		public: z.ZodDefault<z.ZodBoolean>;
		id: z.ZodString;
		owner: z.ZodString;
		computed_attributes: z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			base: z.ZodOptional<z.ZodNumber>;
			val: z.ZodNumber;
			reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
				val: z.ZodNumber;
				src: z.ZodString;
				abilityId: z.ZodOptional<z.ZodString>;
				itemId: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}>, "many">>;
			dice: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}>>>>;
	}, "strip", z.ZodTypeAny, {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
		owner: string;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}, {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		public?: boolean | undefined;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}>;
	flux: z.ZodArray<z.ZodObject<{
		type: z.ZodEnum<[
			"QUEST",
			"TIDE",
			"GRATE",
			"DAM",
			"EFFLUENT",
			"DELTA"
		]>;
		text: z.ZodString;
		metadata: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			effect: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			effect?: string | undefined;
		}, {
			effect?: string | undefined;
		}>>>;
		id: z.ZodString;
		entity_id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}, {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}>, "many">;
	changelog: z.ZodArray<z.ZodObject<{
		attr: z.ZodString;
		msg: z.ZodString;
		prev: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
		id: z.ZodString;
		entity_id: z.ZodString;
		time: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		attr: string;
		time: string;
		id: string;
		entity_id: string;
		msg: string;
		prev?: number | null | undefined;
	}, {
		attr: string;
		time: string;
		id: string;
		entity_id: string;
		msg: string;
		prev?: number | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public: boolean;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		public: boolean;
		owner: string;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
	changelog: {
		attr: string;
		time: string;
		id: string;
		entity_id: string;
		msg: string;
		prev?: number | null | undefined;
	}[];
}, {
	text: {
		key: "NOTES" | "DESC" | "BACKSTORY";
		text: string;
		id: string;
		entity_id: string;
		public?: boolean | undefined;
	}[];
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		id: string;
		entity_id: string;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	items: {
		type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
		name: string;
		active: boolean;
		id: string;
		entity_id: string;
		bulk: number;
		desc: string;
		custom_fields?: {
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			dmg?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	entity: {
		type: "CHARACTER" | "COG";
		name: string;
		id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		public?: boolean | undefined;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	};
	flux: {
		type: "QUEST" | "TIDE" | "GRATE" | "DAM" | "EFFLUENT" | "DELTA";
		text: string;
		id: string;
		entity_id: string;
		metadata?: {
			effect?: string | undefined;
		} | null | undefined;
	}[];
	changelog: {
		attr: string;
		time: string;
		id: string;
		entity_id: string;
		msg: string;
		prev?: number | null | undefined;
	}[];
}>;
export type UncompleteCollectedEntity = z.infer<typeof collectedEntityValidator>;
export type FullCollectedEntity = z.infer<typeof fullCollectedEntityValidator>;
export type CollectedEntity = UncompleteCollectedEntity | FullCollectedEntity;
export type UncompleteCollectedEntityWithChangelog = z.infer<typeof collectedEntityWithChangelogValidator>;
export type FullCollectedEntityWithChangelog = z.infer<typeof fullCollectedEntityWithChangelogValidator>;
export declare const emailValidator: z.ZodString;
export declare const passwordValidator: z.ZodString;
export declare const roleValidator: z.ZodEnum<[
	"USER",
	"ADMIN"
]>;
export declare const signupRequestValidator: z.ZodObject<{
	username: z.ZodString;
	email: z.ZodString;
	password: z.ZodString;
}, "strip", z.ZodTypeAny, {
	email: string;
	username: string;
	password: string;
}, {
	email: string;
	username: string;
	password: string;
}>;
export declare const loginRequestValidator: z.ZodObject<{
	username: z.ZodString;
	password: z.ZodString;
}, "strip", z.ZodTypeAny, {
	username: string;
	password: string;
}, {
	username: string;
	password: string;
}>;
export declare const accountInfoValidator: z.ZodObject<{
	id: z.ZodString;
	username: z.ZodString;
	email: z.ZodString;
	role: z.ZodEnum<[
		"USER",
		"ADMIN"
	]>;
}, "strip", z.ZodTypeAny, {
	email: string;
	id: string;
	username: string;
	role: "USER" | "ADMIN";
}, {
	email: string;
	id: string;
	username: string;
	role: "USER" | "ADMIN";
}>;
export declare const dangerousAccountInfoValidator: z.ZodObject<{
	email: z.ZodString;
	id: z.ZodString;
	username: z.ZodString;
	role: z.ZodEnum<[
		"USER",
		"ADMIN"
	]>;
	password: z.ZodString;
}, "strip", z.ZodTypeAny, {
	email: string;
	id: string;
	username: string;
	password: string;
	role: "USER" | "ADMIN";
}, {
	email: string;
	id: string;
	username: string;
	password: string;
	role: "USER" | "ADMIN";
}>;
export declare const accountTokenValidator: z.ZodObject<{
	token: z.ZodString;
}, "strip", z.ZodTypeAny, {
	token: string;
}, {
	token: string;
}>;
export type SignupRequest = z.infer<typeof signupRequestValidator>;
export type LoginRequest = z.infer<typeof loginRequestValidator>;
export type AccountInfo = z.infer<typeof accountInfoValidator>;
export type AccountToken = z.infer<typeof accountTokenValidator>;
export type DangerousAccountInfo = z.infer<typeof dangerousAccountInfoValidator>;
export declare const CAMPAIGN_ROLE_SPECTATOR = "SPECTATOR";
export declare const CAMPAIGN_ROLE_PLAYER = "PLAYER";
export declare const CAMPAIGN_ROLE_GM = "GM";
export declare const CAMPAIGN_ROLES: readonly [
	"SPECTATOR",
	"PLAYER",
	"GM"
];
export declare const campaignRoleValidator: z.ZodEnum<[
	"SPECTATOR",
	"PLAYER",
	"GM"
]>;
export declare const campaignRoleObjectValidator: z.ZodObject<{
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
}, "strip", z.ZodTypeAny, {
	role: "SPECTATOR" | "PLAYER" | "GM";
}, {
	role: "SPECTATOR" | "PLAYER" | "GM";
}>;
export declare const campaignDescValidator: z.ZodObject<{
	desc: z.ZodString;
}, "strip", z.ZodTypeAny, {
	desc: string;
}, {
	desc: string;
}>;
export declare const postCampaignValidator: z.ZodObject<{
	desc: z.ZodString;
	name: z.ZodString;
}, "strip", z.ZodTypeAny, {
	name: string;
	desc: string;
}, {
	name: string;
	desc: string;
}>;
export declare const campaignValidator: z.ZodObject<{
	name: z.ZodString;
	desc: z.ZodString;
	id: z.ZodString;
	in_combat: z.ZodBoolean;
	init_index: z.ZodNumber;
	init_round: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	name: string;
	id: string;
	desc: string;
	in_combat: boolean;
	init_index: number;
	init_round: number;
}, {
	name: string;
	id: string;
	desc: string;
	in_combat: boolean;
	init_index: number;
	init_round: number;
}>;
export declare const campaignWithRoleValidator: z.ZodObject<{
	name: z.ZodString;
	id: z.ZodString;
	desc: z.ZodString;
	in_combat: z.ZodBoolean;
	init_index: z.ZodNumber;
	init_round: z.ZodNumber;
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
}, "strip", z.ZodTypeAny, {
	name: string;
	id: string;
	desc: string;
	in_combat: boolean;
	role: "SPECTATOR" | "PLAYER" | "GM";
	init_index: number;
	init_round: number;
}, {
	name: string;
	id: string;
	desc: string;
	in_combat: boolean;
	role: "SPECTATOR" | "PLAYER" | "GM";
	init_index: number;
	init_round: number;
}>;
export declare const postCampaignInviteValidator: z.ZodObject<{
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
	campaign_id: z.ZodString;
	to: z.ZodString;
}, "strip", z.ZodTypeAny, {
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
}, {
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
}>;
export declare const campaignInviteValidator: z.ZodObject<{
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
	campaign_id: z.ZodString;
	to: z.ZodString;
	id: z.ZodString;
	from: z.ZodString;
	created: z.ZodString;
}, "strip", z.ZodTypeAny, {
	id: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
	from: string;
	created: string;
}, {
	id: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
	from: string;
	created: string;
}>;
export declare const campaignInviteWithDetailsValidator: z.ZodObject<{
	id: z.ZodString;
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
	campaign_id: z.ZodString;
	to: z.ZodString;
	from: z.ZodString;
	created: z.ZodString;
	name: z.ZodString;
	desc: z.ZodString;
}, "strip", z.ZodTypeAny, {
	name: string;
	id: string;
	desc: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
	from: string;
	created: string;
}, {
	name: string;
	id: string;
	desc: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	to: string;
	from: string;
	created: string;
}>;
export declare const campaignInviteLinkHashValidator: z.ZodString;
export declare const postCampaignInviteLinkValidator: z.ZodObject<{
	campaign_id: z.ZodString;
	hash: z.ZodString;
	minutes_to_expire: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	campaign_id: string;
	hash: string;
	minutes_to_expire: number;
}, {
	campaign_id: string;
	hash: string;
	minutes_to_expire: number;
}>;
export declare const campaignInviteLinkValidator: z.ZodObject<{
	campaign_id: z.ZodString;
	hash: z.ZodString;
	id: z.ZodString;
	expires: z.ZodString;
	created: z.ZodString;
}, "strip", z.ZodTypeAny, {
	id: string;
	campaign_id: string;
	created: string;
	hash: string;
	expires: string;
}, {
	id: string;
	campaign_id: string;
	created: string;
	hash: string;
	expires: string;
}>;
export declare const campaignMemberValidator: z.ZodObject<{
	role: z.ZodEnum<[
		"SPECTATOR",
		"PLAYER",
		"GM"
	]>;
	id: z.ZodString;
	campaign_id: z.ZodString;
	account_id: z.ZodString;
	username: z.ZodString;
}, "strip", z.ZodTypeAny, {
	id: string;
	username: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	account_id: string;
}, {
	id: string;
	username: string;
	role: "SPECTATOR" | "PLAYER" | "GM";
	campaign_id: string;
	account_id: string;
}>;
export declare const postCampaignEntityValidator: z.ZodObject<{
	entity_id: z.ZodString;
	gm_only: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
	entity_id: string;
	gm_only: boolean;
}, {
	entity_id: string;
	gm_only: boolean;
}>;
export declare const campaignEntityValidator: z.ZodObject<{
	entity_id: z.ZodString;
	gm_only: z.ZodBoolean;
	owner: z.ZodString;
	name: z.ZodString;
	type: z.ZodEnum<[
		"CHARACTER",
		"COG"
	]>;
	attributes: z.ZodObject<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodNumber, z.objectOutputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">, z.objectInputType<{
		agi: z.ZodDefault<z.ZodNumber>;
		cha: z.ZodDefault<z.ZodNumber>;
		dex: z.ZodDefault<z.ZodNumber>;
		int: z.ZodDefault<z.ZodNumber>;
		per: z.ZodDefault<z.ZodNumber>;
		spi: z.ZodDefault<z.ZodNumber>;
		str: z.ZodDefault<z.ZodNumber>;
		tek: z.ZodDefault<z.ZodNumber>;
		wis: z.ZodDefault<z.ZodNumber>;
		hp: z.ZodNumber;
		max_hp: z.ZodNumber;
		mp: z.ZodNumber;
		max_mp: z.ZodNumber;
		vim: z.ZodNumber;
		max_vim: z.ZodNumber;
		hero: z.ZodOptional<z.ZodNumber>;
		max_hero: z.ZodOptional<z.ZodNumber>;
		init: z.ZodNumber;
		speed: z.ZodNumber;
		xp: z.ZodOptional<z.ZodNumber>;
		sp: z.ZodOptional<z.ZodNumber>;
		armor: z.ZodOptional<z.ZodNumber>;
		burden: z.ZodOptional<z.ZodNumber>;
		casting: z.ZodOptional<z.ZodNumber>;
		l: z.ZodOptional<z.ZodNumber>;
		radius: z.ZodOptional<z.ZodNumber>;
		reach: z.ZodOptional<z.ZodNumber>;
		shield: z.ZodOptional<z.ZodNumber>;
		bluespace: z.ZodOptional<z.ZodNumber>;
		trii: z.ZodOptional<z.ZodNumber>;
		max_trii: z.ZodOptional<z.ZodNumber>;
		free_hands: z.ZodOptional<z.ZodNumber>;
		carrying_capacity: z.ZodOptional<z.ZodNumber>;
		alerts: z.ZodOptional<z.ZodNumber>;
		max_alerts: z.ZodOptional<z.ZodNumber>;
		recovery_shock: z.ZodOptional<z.ZodNumber>;
		acc: z.ZodOptional<z.ZodNumber>;
		dmg: z.ZodOptional<z.ZodNumber>;
		actions: z.ZodOptional<z.ZodNumber>;
		reactions: z.ZodOptional<z.ZodNumber>;
		actions_on_turn: z.ZodOptional<z.ZodNumber>;
		reactions_on_turn: z.ZodOptional<z.ZodNumber>;
		heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
		aggressive_acc: z.ZodOptional<z.ZodNumber>;
		aggressive_dmg: z.ZodOptional<z.ZodNumber>;
		arcane_acc: z.ZodOptional<z.ZodNumber>;
		arcane_dmg: z.ZodOptional<z.ZodNumber>;
		balanced_acc: z.ZodOptional<z.ZodNumber>;
		balanced_dmg: z.ZodOptional<z.ZodNumber>;
		blade_acc: z.ZodOptional<z.ZodNumber>;
		blade_dmg: z.ZodOptional<z.ZodNumber>;
		bow_acc: z.ZodOptional<z.ZodNumber>;
		bow_dmg: z.ZodOptional<z.ZodNumber>;
		brawling_acc: z.ZodOptional<z.ZodNumber>;
		brawling_dmg: z.ZodOptional<z.ZodNumber>;
		brutal_acc: z.ZodOptional<z.ZodNumber>;
		brutal_dmg: z.ZodOptional<z.ZodNumber>;
		cannon_acc: z.ZodOptional<z.ZodNumber>;
		cannon_dmg: z.ZodOptional<z.ZodNumber>;
		great_acc: z.ZodOptional<z.ZodNumber>;
		great_dmg: z.ZodOptional<z.ZodNumber>;
		grenade_acc: z.ZodOptional<z.ZodNumber>;
		grenade_dmg: z.ZodOptional<z.ZodNumber>;
		hookwhip_acc: z.ZodOptional<z.ZodNumber>;
		hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
		improvised_acc: z.ZodOptional<z.ZodNumber>;
		improvised_dmg: z.ZodOptional<z.ZodNumber>;
		polearm_acc: z.ZodOptional<z.ZodNumber>;
		polearm_dmg: z.ZodOptional<z.ZodNumber>;
		protector_acc: z.ZodOptional<z.ZodNumber>;
		protector_dmg: z.ZodOptional<z.ZodNumber>;
		rifle_acc: z.ZodOptional<z.ZodNumber>;
		rifle_dmg: z.ZodOptional<z.ZodNumber>;
		shotgun_acc: z.ZodOptional<z.ZodNumber>;
		shotgun_dmg: z.ZodOptional<z.ZodNumber>;
		sidearm_acc: z.ZodOptional<z.ZodNumber>;
		sidearm_dmg: z.ZodOptional<z.ZodNumber>;
		thrown_acc: z.ZodOptional<z.ZodNumber>;
		thrown_dmg: z.ZodOptional<z.ZodNumber>;
		tinkertech_acc: z.ZodOptional<z.ZodNumber>;
		tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
		unarmed_acc: z.ZodOptional<z.ZodNumber>;
		unarmed_dmg: z.ZodOptional<z.ZodNumber>;
		whip_acc: z.ZodOptional<z.ZodNumber>;
		whip_dmg: z.ZodOptional<z.ZodNumber>;
		fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
		vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
		stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
		paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
		attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
		galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
		magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
		piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
		bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
		burning: z.ZodOptional<z.ZodNumber>;
		bleeding: z.ZodOptional<z.ZodNumber>;
		paralysis: z.ZodOptional<z.ZodNumber>;
		stun: z.ZodOptional<z.ZodNumber>;
		agi_dmg: z.ZodOptional<z.ZodNumber>;
		cha_dmg: z.ZodOptional<z.ZodNumber>;
		dex_dmg: z.ZodOptional<z.ZodNumber>;
		int_dmg: z.ZodOptional<z.ZodNumber>;
		per_dmg: z.ZodOptional<z.ZodNumber>;
		spi_dmg: z.ZodOptional<z.ZodNumber>;
		str_dmg: z.ZodOptional<z.ZodNumber>;
		tek_dmg: z.ZodOptional<z.ZodNumber>;
		wis_dmg: z.ZodOptional<z.ZodNumber>;
	}, z.ZodNumber, "strip">>;
	other_fields: z.ZodObject<{
		gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		second_gift: z.ZodOptional<z.ZodEnum<[
			"Alertness",
			"Craft",
			"Alacrity",
			"Finesse",
			"Mind",
			"Magic",
			"Rage",
			"Science",
			"Charm",
			"None"
		]>>;
		cog_type: z.ZodOptional<z.ZodString>;
		cog_creation_options: z.ZodOptional<z.ZodObject<{
			name: z.ZodString;
			level: z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>;
			type: z.ZodString;
			desc: z.ZodString;
			attrOverrides: z.ZodRecord<z.ZodEnum<[
				"per",
				"tek",
				"agi",
				"dex",
				"int",
				"spi",
				"str",
				"wis",
				"cha"
			]>, z.ZodEnum<[
				"weak",
				"moderate",
				"strong",
				"exceptional"
			]>>;
			abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
			variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodString,
				z.ZodNumber
			]>>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}, {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		}>>;
		dice_settings: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
		in_combat: z.ZodOptional<z.ZodBoolean>;
		disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
			msg: z.ZodString;
			icon: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			msg: string;
			icon?: string | undefined;
		}, {
			msg: string;
			icon?: string | undefined;
		}>, "many">>>;
	}, "strip", z.ZodTypeAny, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}, {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	}>;
	computed_attributes: z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
		base: z.ZodOptional<z.ZodNumber>;
		val: z.ZodNumber;
		reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
			val: z.ZodNumber;
			src: z.ZodString;
			abilityId: z.ZodOptional<z.ZodString>;
			itemId: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}, {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}>, "many">>;
		dice: z.ZodOptional<z.ZodObject<{
			explodes: z.ZodOptional<z.ZodBoolean>;
			rr1s: z.ZodOptional<z.ZodBoolean>;
			drop: z.ZodOptional<z.ZodNumber>;
			fatigued: z.ZodOptional<z.ZodBoolean>;
			end: z.ZodOptional<z.ZodString>;
			flow: z.ZodOptional<z.ZodNumber>;
			ebb: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				toggled: z.ZodBoolean;
			}, "strip", z.ZodTypeAny, {
				toggled: boolean;
			}, {
				toggled: boolean;
			}>>>;
			adjust: z.ZodOptional<z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			count: z.ZodOptional<z.ZodNumber>;
			sides: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}, {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		}>>;
	}, "strip", z.ZodTypeAny, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}>>>>;
}, "strip", z.ZodTypeAny, {
	type: "CHARACTER" | "COG";
	name: string;
	entity_id: string;
	attributes: {
		per: number;
		tek: number;
		agi: number;
		dex: number;
		int: number;
		spi: number;
		str: number;
		wis: number;
		cha: number;
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	owner: string;
	gm_only: boolean;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}, {
	type: "CHARACTER" | "COG";
	name: string;
	entity_id: string;
	attributes: {
		hp: number;
		max_hp: number;
		mp: number;
		max_mp: number;
		vim: number;
		max_vim: number;
		init: number;
		speed: number;
		agi?: number | undefined;
		cha?: number | undefined;
		dex?: number | undefined;
		int?: number | undefined;
		per?: number | undefined;
		spi?: number | undefined;
		str?: number | undefined;
		tek?: number | undefined;
		wis?: number | undefined;
		hero?: number | undefined;
		max_hero?: number | undefined;
		xp?: number | undefined;
		sp?: number | undefined;
		armor?: number | undefined;
		burden?: number | undefined;
		casting?: number | undefined;
		l?: number | undefined;
		radius?: number | undefined;
		reach?: number | undefined;
		shield?: number | undefined;
		bluespace?: number | undefined;
		trii?: number | undefined;
		max_trii?: number | undefined;
		free_hands?: number | undefined;
		carrying_capacity?: number | undefined;
		alerts?: number | undefined;
		max_alerts?: number | undefined;
		recovery_shock?: number | undefined;
		acc?: number | undefined;
		dmg?: number | undefined;
		actions?: number | undefined;
		reactions?: number | undefined;
		actions_on_turn?: number | undefined;
		reactions_on_turn?: number | undefined;
		heroic_creativity_bonus?: number | undefined;
		aggressive_acc?: number | undefined;
		aggressive_dmg?: number | undefined;
		arcane_acc?: number | undefined;
		arcane_dmg?: number | undefined;
		balanced_acc?: number | undefined;
		balanced_dmg?: number | undefined;
		blade_acc?: number | undefined;
		blade_dmg?: number | undefined;
		bow_acc?: number | undefined;
		bow_dmg?: number | undefined;
		brawling_acc?: number | undefined;
		brawling_dmg?: number | undefined;
		brutal_acc?: number | undefined;
		brutal_dmg?: number | undefined;
		cannon_acc?: number | undefined;
		cannon_dmg?: number | undefined;
		great_acc?: number | undefined;
		great_dmg?: number | undefined;
		grenade_acc?: number | undefined;
		grenade_dmg?: number | undefined;
		hookwhip_acc?: number | undefined;
		hookwhip_dmg?: number | undefined;
		improvised_acc?: number | undefined;
		improvised_dmg?: number | undefined;
		polearm_acc?: number | undefined;
		polearm_dmg?: number | undefined;
		protector_acc?: number | undefined;
		protector_dmg?: number | undefined;
		rifle_acc?: number | undefined;
		rifle_dmg?: number | undefined;
		shotgun_acc?: number | undefined;
		shotgun_dmg?: number | undefined;
		sidearm_acc?: number | undefined;
		sidearm_dmg?: number | undefined;
		thrown_acc?: number | undefined;
		thrown_dmg?: number | undefined;
		tinkertech_acc?: number | undefined;
		tinkertech_dmg?: number | undefined;
		unarmed_acc?: number | undefined;
		unarmed_dmg?: number | undefined;
		whip_acc?: number | undefined;
		whip_dmg?: number | undefined;
		fall_damage_resistance?: number | undefined;
		vim_damage_resistance?: number | undefined;
		burn_damage_resistance?: number | undefined;
		bleed_damage_resistance?: number | undefined;
		stun_damage_resistance?: number | undefined;
		paralysis_damage_resistance?: number | undefined;
		attribute_damage_resistance?: number | undefined;
		galvanic_damage_resistance?: number | undefined;
		magical_damage_resistance?: number | undefined;
		physical_damage_resistance?: number | undefined;
		piercing_damage_resistance?: number | undefined;
		slashing_damage_resistance?: number | undefined;
		bludgeoning_damage_resistance?: number | undefined;
		burning?: number | undefined;
		bleeding?: number | undefined;
		paralysis?: number | undefined;
		stun?: number | undefined;
		agi_dmg?: number | undefined;
		cha_dmg?: number | undefined;
		dex_dmg?: number | undefined;
		int_dmg?: number | undefined;
		per_dmg?: number | undefined;
		spi_dmg?: number | undefined;
		str_dmg?: number | undefined;
		tek_dmg?: number | undefined;
		wis_dmg?: number | undefined;
	} & {
		[k: string]: number;
	};
	other_fields: {
		gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
		cog_type?: string | undefined;
		cog_creation_options?: {
			type: string;
			name: string;
			desc: string;
			level: string | number;
			attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
			abilitySelection: Record<string, string>;
			variableAbilityCost: Record<string, string | number>;
		} | undefined;
		dice_settings?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
		in_combat?: boolean | undefined;
		disabled_actions?: Record<string, {
			msg: string;
			icon?: string | undefined;
		}[]> | undefined;
	};
	owner: string;
	gm_only: boolean;
	computed_attributes?: Record<string, {
		val: number;
		base?: number | undefined;
		reason?: {
			val: number;
			src: string;
			abilityId?: string | undefined;
			itemId?: string | undefined;
		}[] | undefined;
		dice?: {
			explodes?: boolean | undefined;
			rr1s?: boolean | undefined;
			drop?: number | undefined;
			fatigued?: boolean | undefined;
			end?: string | undefined;
			flow?: number | undefined;
			ebb?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			otherToggles?: Record<string, {
				toggled: boolean;
			}> | undefined;
			adjust?: string | number | undefined;
			count?: number | undefined;
			sides?: number | undefined;
		} | undefined;
	}> | null | undefined;
}>;
export declare const fullCampaignDetailsValidator: z.ZodObject<{
	campaign: z.ZodObject<{
		name: z.ZodString;
		desc: z.ZodString;
		id: z.ZodString;
		in_combat: z.ZodBoolean;
		init_index: z.ZodNumber;
		init_round: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		name: string;
		id: string;
		desc: string;
		in_combat: boolean;
		init_index: number;
		init_round: number;
	}, {
		name: string;
		id: string;
		desc: string;
		in_combat: boolean;
		init_index: number;
		init_round: number;
	}>;
	invites: z.ZodOptional<z.ZodArray<z.ZodObject<{
		role: z.ZodEnum<[
			"SPECTATOR",
			"PLAYER",
			"GM"
		]>;
		campaign_id: z.ZodString;
		to: z.ZodString;
		id: z.ZodString;
		from: z.ZodString;
		created: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		id: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		to: string;
		from: string;
		created: string;
	}, {
		id: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		to: string;
		from: string;
		created: string;
	}>, "many">>;
	invite_links: z.ZodOptional<z.ZodArray<z.ZodObject<{
		campaign_id: z.ZodString;
		hash: z.ZodString;
		id: z.ZodString;
		expires: z.ZodString;
		created: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		id: string;
		campaign_id: string;
		created: string;
		hash: string;
		expires: string;
	}, {
		id: string;
		campaign_id: string;
		created: string;
		hash: string;
		expires: string;
	}>, "many">>;
	members: z.ZodArray<z.ZodObject<{
		role: z.ZodEnum<[
			"SPECTATOR",
			"PLAYER",
			"GM"
		]>;
		id: z.ZodString;
		campaign_id: z.ZodString;
		account_id: z.ZodString;
		username: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		id: string;
		username: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		account_id: string;
	}, {
		id: string;
		username: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		account_id: string;
	}>, "many">;
	entities: z.ZodArray<z.ZodObject<{
		entity_id: z.ZodString;
		gm_only: z.ZodBoolean;
		owner: z.ZodString;
		name: z.ZodString;
		type: z.ZodEnum<[
			"CHARACTER",
			"COG"
		]>;
		attributes: z.ZodObject<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodNumber, z.objectOutputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">, z.objectInputType<{
			agi: z.ZodDefault<z.ZodNumber>;
			cha: z.ZodDefault<z.ZodNumber>;
			dex: z.ZodDefault<z.ZodNumber>;
			int: z.ZodDefault<z.ZodNumber>;
			per: z.ZodDefault<z.ZodNumber>;
			spi: z.ZodDefault<z.ZodNumber>;
			str: z.ZodDefault<z.ZodNumber>;
			tek: z.ZodDefault<z.ZodNumber>;
			wis: z.ZodDefault<z.ZodNumber>;
			hp: z.ZodNumber;
			max_hp: z.ZodNumber;
			mp: z.ZodNumber;
			max_mp: z.ZodNumber;
			vim: z.ZodNumber;
			max_vim: z.ZodNumber;
			hero: z.ZodOptional<z.ZodNumber>;
			max_hero: z.ZodOptional<z.ZodNumber>;
			init: z.ZodNumber;
			speed: z.ZodNumber;
			xp: z.ZodOptional<z.ZodNumber>;
			sp: z.ZodOptional<z.ZodNumber>;
			armor: z.ZodOptional<z.ZodNumber>;
			burden: z.ZodOptional<z.ZodNumber>;
			casting: z.ZodOptional<z.ZodNumber>;
			l: z.ZodOptional<z.ZodNumber>;
			radius: z.ZodOptional<z.ZodNumber>;
			reach: z.ZodOptional<z.ZodNumber>;
			shield: z.ZodOptional<z.ZodNumber>;
			bluespace: z.ZodOptional<z.ZodNumber>;
			trii: z.ZodOptional<z.ZodNumber>;
			max_trii: z.ZodOptional<z.ZodNumber>;
			free_hands: z.ZodOptional<z.ZodNumber>;
			carrying_capacity: z.ZodOptional<z.ZodNumber>;
			alerts: z.ZodOptional<z.ZodNumber>;
			max_alerts: z.ZodOptional<z.ZodNumber>;
			recovery_shock: z.ZodOptional<z.ZodNumber>;
			acc: z.ZodOptional<z.ZodNumber>;
			dmg: z.ZodOptional<z.ZodNumber>;
			actions: z.ZodOptional<z.ZodNumber>;
			reactions: z.ZodOptional<z.ZodNumber>;
			actions_on_turn: z.ZodOptional<z.ZodNumber>;
			reactions_on_turn: z.ZodOptional<z.ZodNumber>;
			heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
			aggressive_acc: z.ZodOptional<z.ZodNumber>;
			aggressive_dmg: z.ZodOptional<z.ZodNumber>;
			arcane_acc: z.ZodOptional<z.ZodNumber>;
			arcane_dmg: z.ZodOptional<z.ZodNumber>;
			balanced_acc: z.ZodOptional<z.ZodNumber>;
			balanced_dmg: z.ZodOptional<z.ZodNumber>;
			blade_acc: z.ZodOptional<z.ZodNumber>;
			blade_dmg: z.ZodOptional<z.ZodNumber>;
			bow_acc: z.ZodOptional<z.ZodNumber>;
			bow_dmg: z.ZodOptional<z.ZodNumber>;
			brawling_acc: z.ZodOptional<z.ZodNumber>;
			brawling_dmg: z.ZodOptional<z.ZodNumber>;
			brutal_acc: z.ZodOptional<z.ZodNumber>;
			brutal_dmg: z.ZodOptional<z.ZodNumber>;
			cannon_acc: z.ZodOptional<z.ZodNumber>;
			cannon_dmg: z.ZodOptional<z.ZodNumber>;
			great_acc: z.ZodOptional<z.ZodNumber>;
			great_dmg: z.ZodOptional<z.ZodNumber>;
			grenade_acc: z.ZodOptional<z.ZodNumber>;
			grenade_dmg: z.ZodOptional<z.ZodNumber>;
			hookwhip_acc: z.ZodOptional<z.ZodNumber>;
			hookwhip_dmg: z.ZodOptional<z.ZodNumber>;
			improvised_acc: z.ZodOptional<z.ZodNumber>;
			improvised_dmg: z.ZodOptional<z.ZodNumber>;
			polearm_acc: z.ZodOptional<z.ZodNumber>;
			polearm_dmg: z.ZodOptional<z.ZodNumber>;
			protector_acc: z.ZodOptional<z.ZodNumber>;
			protector_dmg: z.ZodOptional<z.ZodNumber>;
			rifle_acc: z.ZodOptional<z.ZodNumber>;
			rifle_dmg: z.ZodOptional<z.ZodNumber>;
			shotgun_acc: z.ZodOptional<z.ZodNumber>;
			shotgun_dmg: z.ZodOptional<z.ZodNumber>;
			sidearm_acc: z.ZodOptional<z.ZodNumber>;
			sidearm_dmg: z.ZodOptional<z.ZodNumber>;
			thrown_acc: z.ZodOptional<z.ZodNumber>;
			thrown_dmg: z.ZodOptional<z.ZodNumber>;
			tinkertech_acc: z.ZodOptional<z.ZodNumber>;
			tinkertech_dmg: z.ZodOptional<z.ZodNumber>;
			unarmed_acc: z.ZodOptional<z.ZodNumber>;
			unarmed_dmg: z.ZodOptional<z.ZodNumber>;
			whip_acc: z.ZodOptional<z.ZodNumber>;
			whip_dmg: z.ZodOptional<z.ZodNumber>;
			fall_damage_resistance: z.ZodOptional<z.ZodNumber>;
			vim_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burn_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bleed_damage_resistance: z.ZodOptional<z.ZodNumber>;
			stun_damage_resistance: z.ZodOptional<z.ZodNumber>;
			paralysis_damage_resistance: z.ZodOptional<z.ZodNumber>;
			attribute_damage_resistance: z.ZodOptional<z.ZodNumber>;
			galvanic_damage_resistance: z.ZodOptional<z.ZodNumber>;
			magical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			physical_damage_resistance: z.ZodOptional<z.ZodNumber>;
			piercing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			slashing_damage_resistance: z.ZodOptional<z.ZodNumber>;
			bludgeoning_damage_resistance: z.ZodOptional<z.ZodNumber>;
			burning: z.ZodOptional<z.ZodNumber>;
			bleeding: z.ZodOptional<z.ZodNumber>;
			paralysis: z.ZodOptional<z.ZodNumber>;
			stun: z.ZodOptional<z.ZodNumber>;
			agi_dmg: z.ZodOptional<z.ZodNumber>;
			cha_dmg: z.ZodOptional<z.ZodNumber>;
			dex_dmg: z.ZodOptional<z.ZodNumber>;
			int_dmg: z.ZodOptional<z.ZodNumber>;
			per_dmg: z.ZodOptional<z.ZodNumber>;
			spi_dmg: z.ZodOptional<z.ZodNumber>;
			str_dmg: z.ZodOptional<z.ZodNumber>;
			tek_dmg: z.ZodOptional<z.ZodNumber>;
			wis_dmg: z.ZodOptional<z.ZodNumber>;
		}, z.ZodNumber, "strip">>;
		other_fields: z.ZodObject<{
			gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			second_gift: z.ZodOptional<z.ZodEnum<[
				"Alertness",
				"Craft",
				"Alacrity",
				"Finesse",
				"Mind",
				"Magic",
				"Rage",
				"Science",
				"Charm",
				"None"
			]>>;
			cog_type: z.ZodOptional<z.ZodString>;
			cog_creation_options: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
				level: z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>;
				type: z.ZodString;
				desc: z.ZodString;
				attrOverrides: z.ZodRecord<z.ZodEnum<[
					"per",
					"tek",
					"agi",
					"dex",
					"int",
					"spi",
					"str",
					"wis",
					"cha"
				]>, z.ZodEnum<[
					"weak",
					"moderate",
					"strong",
					"exceptional"
				]>>;
				abilitySelection: z.ZodRecord<z.ZodString, z.ZodString>;
				variableAbilityCost: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}, {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			}>>;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			in_combat: z.ZodOptional<z.ZodBoolean>;
			disabled_actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
				msg: z.ZodString;
				icon: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				msg: string;
				icon?: string | undefined;
			}, {
				msg: string;
				icon?: string | undefined;
			}>, "many">>>;
		}, "strip", z.ZodTypeAny, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}, {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		}>;
		computed_attributes: z.ZodNullable<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
			base: z.ZodOptional<z.ZodNumber>;
			val: z.ZodNumber;
			reason: z.ZodOptional<z.ZodArray<z.ZodObject<{
				val: z.ZodNumber;
				src: z.ZodString;
				abilityId: z.ZodOptional<z.ZodString>;
				itemId: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}, {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}>, "many">>;
			dice: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}>>>>;
	}, "strip", z.ZodTypeAny, {
		type: "CHARACTER" | "COG";
		name: string;
		entity_id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		gm_only: boolean;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}, {
		type: "CHARACTER" | "COG";
		name: string;
		entity_id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		gm_only: boolean;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	campaign: {
		name: string;
		id: string;
		desc: string;
		in_combat: boolean;
		init_index: number;
		init_round: number;
	};
	members: {
		id: string;
		username: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		account_id: string;
	}[];
	entities: {
		type: "CHARACTER" | "COG";
		name: string;
		entity_id: string;
		attributes: {
			per: number;
			tek: number;
			agi: number;
			dex: number;
			int: number;
			spi: number;
			str: number;
			wis: number;
			cha: number;
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		gm_only: boolean;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}[];
	invites?: {
		id: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		to: string;
		from: string;
		created: string;
	}[] | undefined;
	invite_links?: {
		id: string;
		campaign_id: string;
		created: string;
		hash: string;
		expires: string;
	}[] | undefined;
}, {
	campaign: {
		name: string;
		id: string;
		desc: string;
		in_combat: boolean;
		init_index: number;
		init_round: number;
	};
	members: {
		id: string;
		username: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		account_id: string;
	}[];
	entities: {
		type: "CHARACTER" | "COG";
		name: string;
		entity_id: string;
		attributes: {
			hp: number;
			max_hp: number;
			mp: number;
			max_mp: number;
			vim: number;
			max_vim: number;
			init: number;
			speed: number;
			agi?: number | undefined;
			cha?: number | undefined;
			dex?: number | undefined;
			int?: number | undefined;
			per?: number | undefined;
			spi?: number | undefined;
			str?: number | undefined;
			tek?: number | undefined;
			wis?: number | undefined;
			hero?: number | undefined;
			max_hero?: number | undefined;
			xp?: number | undefined;
			sp?: number | undefined;
			armor?: number | undefined;
			burden?: number | undefined;
			casting?: number | undefined;
			l?: number | undefined;
			radius?: number | undefined;
			reach?: number | undefined;
			shield?: number | undefined;
			bluespace?: number | undefined;
			trii?: number | undefined;
			max_trii?: number | undefined;
			free_hands?: number | undefined;
			carrying_capacity?: number | undefined;
			alerts?: number | undefined;
			max_alerts?: number | undefined;
			recovery_shock?: number | undefined;
			acc?: number | undefined;
			dmg?: number | undefined;
			actions?: number | undefined;
			reactions?: number | undefined;
			actions_on_turn?: number | undefined;
			reactions_on_turn?: number | undefined;
			heroic_creativity_bonus?: number | undefined;
			aggressive_acc?: number | undefined;
			aggressive_dmg?: number | undefined;
			arcane_acc?: number | undefined;
			arcane_dmg?: number | undefined;
			balanced_acc?: number | undefined;
			balanced_dmg?: number | undefined;
			blade_acc?: number | undefined;
			blade_dmg?: number | undefined;
			bow_acc?: number | undefined;
			bow_dmg?: number | undefined;
			brawling_acc?: number | undefined;
			brawling_dmg?: number | undefined;
			brutal_acc?: number | undefined;
			brutal_dmg?: number | undefined;
			cannon_acc?: number | undefined;
			cannon_dmg?: number | undefined;
			great_acc?: number | undefined;
			great_dmg?: number | undefined;
			grenade_acc?: number | undefined;
			grenade_dmg?: number | undefined;
			hookwhip_acc?: number | undefined;
			hookwhip_dmg?: number | undefined;
			improvised_acc?: number | undefined;
			improvised_dmg?: number | undefined;
			polearm_acc?: number | undefined;
			polearm_dmg?: number | undefined;
			protector_acc?: number | undefined;
			protector_dmg?: number | undefined;
			rifle_acc?: number | undefined;
			rifle_dmg?: number | undefined;
			shotgun_acc?: number | undefined;
			shotgun_dmg?: number | undefined;
			sidearm_acc?: number | undefined;
			sidearm_dmg?: number | undefined;
			thrown_acc?: number | undefined;
			thrown_dmg?: number | undefined;
			tinkertech_acc?: number | undefined;
			tinkertech_dmg?: number | undefined;
			unarmed_acc?: number | undefined;
			unarmed_dmg?: number | undefined;
			whip_acc?: number | undefined;
			whip_dmg?: number | undefined;
			fall_damage_resistance?: number | undefined;
			vim_damage_resistance?: number | undefined;
			burn_damage_resistance?: number | undefined;
			bleed_damage_resistance?: number | undefined;
			stun_damage_resistance?: number | undefined;
			paralysis_damage_resistance?: number | undefined;
			attribute_damage_resistance?: number | undefined;
			galvanic_damage_resistance?: number | undefined;
			magical_damage_resistance?: number | undefined;
			physical_damage_resistance?: number | undefined;
			piercing_damage_resistance?: number | undefined;
			slashing_damage_resistance?: number | undefined;
			bludgeoning_damage_resistance?: number | undefined;
			burning?: number | undefined;
			bleeding?: number | undefined;
			paralysis?: number | undefined;
			stun?: number | undefined;
			agi_dmg?: number | undefined;
			cha_dmg?: number | undefined;
			dex_dmg?: number | undefined;
			int_dmg?: number | undefined;
			per_dmg?: number | undefined;
			spi_dmg?: number | undefined;
			str_dmg?: number | undefined;
			tek_dmg?: number | undefined;
			wis_dmg?: number | undefined;
		} & {
			[k: string]: number;
		};
		other_fields: {
			gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			second_gift?: "Alertness" | "Craft" | "Alacrity" | "Finesse" | "Mind" | "Magic" | "Rage" | "Science" | "Charm" | "None" | undefined;
			cog_type?: string | undefined;
			cog_creation_options?: {
				type: string;
				name: string;
				desc: string;
				level: string | number;
				attrOverrides: Partial<Record<"per" | "tek" | "agi" | "dex" | "int" | "spi" | "str" | "wis" | "cha", "weak" | "moderate" | "strong" | "exceptional">>;
				abilitySelection: Record<string, string>;
				variableAbilityCost: Record<string, string | number>;
			} | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			in_combat?: boolean | undefined;
			disabled_actions?: Record<string, {
				msg: string;
				icon?: string | undefined;
			}[]> | undefined;
		};
		owner: string;
		gm_only: boolean;
		computed_attributes?: Record<string, {
			val: number;
			base?: number | undefined;
			reason?: {
				val: number;
				src: string;
				abilityId?: string | undefined;
				itemId?: string | undefined;
			}[] | undefined;
			dice?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
		}> | null | undefined;
	}[];
	invites?: {
		id: string;
		role: "SPECTATOR" | "PLAYER" | "GM";
		campaign_id: string;
		to: string;
		from: string;
		created: string;
	}[] | undefined;
	invite_links?: {
		id: string;
		campaign_id: string;
		created: string;
		hash: string;
		expires: string;
	}[] | undefined;
}>;
export type CampaignRole = z.infer<typeof campaignRoleValidator>;
export type CampaignDesc = z.infer<typeof campaignDescValidator>;
export type PostCampaign = z.infer<typeof postCampaignValidator>;
export type Campaign = z.infer<typeof campaignValidator>;
export type CampaignWithRole = z.infer<typeof campaignWithRoleValidator>;
export type PostCampaignInvite = z.infer<typeof postCampaignInviteValidator>;
export type CampaignInvite = z.infer<typeof campaignInviteValidator>;
export type CampaignInviteWithDetails = z.infer<typeof campaignInviteWithDetailsValidator>;
export type PostCampaignInviteLink = z.infer<typeof postCampaignInviteLinkValidator>;
export type CampaignInviteLink = z.infer<typeof campaignInviteLinkValidator>;
export type PostCampaignEntity = z.infer<typeof postCampaignEntityValidator>;
export type CampaignMember = z.infer<typeof campaignMemberValidator>;
export type CampaignEntity = z.infer<typeof campaignEntityValidator>;
export type FullCampaignDetails = z.infer<typeof fullCampaignDetailsValidator>;
export declare const CONNECTION_AUTHORIZED_MSG = "ok";
export declare const CHAT_TYPE = "c";
export declare const SEND_CHAT_TYPE = "cs";
export declare const REQUEST_CHAT_TYPE = "cr";
export declare const OLD_CHAT_TYPE = "co";
export declare const REQUEST_UPDATE_CHAT_TYPE = "cru";
export declare const UPDATE_CHAT_TYPE = "cu";
export declare const DELETE_CHAT_TYPE = "cd";
export declare const REQUEST_DICE_ROLL_TYPE = "dr";
export declare const DICE_ROLL_RESULT_TYPE = "d";
export declare const baseWebsocketMessageValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	request_id?: string | undefined;
}, {
	request_id?: string | undefined;
}>;
export declare const baseStoredWebsocketMessageValidator: z.ZodObject<{
	id: z.ZodString;
	sender: z.ZodString;
	time: z.ZodString;
	updated: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	time: string;
	id: string;
	sender: string;
	updated?: string | undefined;
}, {
	time: string;
	id: string;
	sender: string;
	updated?: string | undefined;
}>;
export declare const sendChatMessageValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"cs">;
	message: z.ZodString;
	entity: z.ZodOptional<z.ZodString>;
	for: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	message: string;
	type: "cs";
	request_id?: string | undefined;
	entity?: string | undefined;
	for?: string | undefined;
}, {
	message: string;
	type: "cs";
	request_id?: string | undefined;
	entity?: string | undefined;
	for?: string | undefined;
}>;
export type SendChatMessage = z.infer<typeof sendChatMessageValidator>;
export declare const chatMessageValidator: z.ZodObject<{
	message: z.ZodString;
	time: z.ZodString;
	id: z.ZodString;
	entity: z.ZodOptional<z.ZodString>;
	request_id: z.ZodOptional<z.ZodString>;
	sender: z.ZodString;
	updated: z.ZodOptional<z.ZodString>;
	for: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"c">;
}, "strip", z.ZodTypeAny, {
	message: string;
	type: "c";
	time: string;
	id: string;
	sender: string;
	entity?: string | undefined;
	request_id?: string | undefined;
	updated?: string | undefined;
	for?: string | undefined;
}, {
	message: string;
	type: "c";
	time: string;
	id: string;
	sender: string;
	entity?: string | undefined;
	request_id?: string | undefined;
	updated?: string | undefined;
	for?: string | undefined;
}>;
export type ChatMessage = z.infer<typeof chatMessageValidator>;
export declare const requestUpdateChatMessageValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"cru">;
	id: z.ZodString;
	message: z.ZodString;
}, "strip", z.ZodTypeAny, {
	message: string;
	type: "cru";
	id: string;
	request_id?: string | undefined;
}, {
	message: string;
	type: "cru";
	id: string;
	request_id?: string | undefined;
}>;
export type RequestUpdateChatMessage = z.infer<typeof requestUpdateChatMessageValidator>;
export declare const updatedChatMessageValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"cu">;
	id: z.ZodString;
	message: z.ZodString;
	updated: z.ZodString;
}, "strip", z.ZodTypeAny, {
	message: string;
	type: "cu";
	id: string;
	updated: string;
	request_id?: string | undefined;
}, {
	message: string;
	type: "cu";
	id: string;
	updated: string;
	request_id?: string | undefined;
}>;
export type UpdatedChatMessage = z.infer<typeof updatedChatMessageValidator>;
export declare const deleteChatMessageValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"cd">;
	id: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "cd";
	id: string;
	request_id?: string | undefined;
}, {
	type: "cd";
	id: string;
	request_id?: string | undefined;
}>;
export type DeleteChatMessage = z.infer<typeof deleteChatMessageValidator>;
export declare const requestDiceRollValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"dr">;
	entity: z.ZodOptional<z.ZodString>;
	dice: z.ZodString;
	message: z.ZodOptional<z.ZodString>;
	gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
}, "strip", z.ZodTypeAny, {
	type: "dr";
	dice: string;
	request_id?: string | undefined;
	entity?: string | undefined;
	message?: string | undefined;
	gm_only?: "t" | undefined;
}, {
	type: "dr";
	dice: string;
	request_id?: string | undefined;
	entity?: string | undefined;
	message?: string | undefined;
	gm_only?: "t" | undefined;
}>;
export type RequestDiceRoll = z.infer<typeof requestDiceRollValidator>;
export declare const diceRollResultValidator: z.ZodObject<{
	message: z.ZodOptional<z.ZodString>;
	dice: z.ZodString;
	time: z.ZodString;
	id: z.ZodString;
	entity: z.ZodOptional<z.ZodString>;
	gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
	request_id: z.ZodOptional<z.ZodString>;
	sender: z.ZodString;
	updated: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"d">;
	result: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "d";
	dice: string;
	time: string;
	id: string;
	sender: string;
	result: string;
	message?: string | undefined;
	entity?: string | undefined;
	gm_only?: "t" | undefined;
	request_id?: string | undefined;
	updated?: string | undefined;
}, {
	type: "d";
	dice: string;
	time: string;
	id: string;
	sender: string;
	result: string;
	message?: string | undefined;
	entity?: string | undefined;
	gm_only?: "t" | undefined;
	request_id?: string | undefined;
	updated?: string | undefined;
}>;
export type DiceRollResult = z.infer<typeof diceRollResultValidator>;
export declare const storedMessageValidator: z.ZodUnion<[
	z.ZodObject<{
		message: z.ZodString;
		time: z.ZodString;
		id: z.ZodString;
		entity: z.ZodOptional<z.ZodString>;
		request_id: z.ZodOptional<z.ZodString>;
		sender: z.ZodString;
		updated: z.ZodOptional<z.ZodString>;
		for: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"c">;
	}, "strip", z.ZodTypeAny, {
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	}, {
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	}>,
	z.ZodObject<{
		message: z.ZodOptional<z.ZodString>;
		dice: z.ZodString;
		time: z.ZodString;
		id: z.ZodString;
		entity: z.ZodOptional<z.ZodString>;
		gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
		request_id: z.ZodOptional<z.ZodString>;
		sender: z.ZodString;
		updated: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"d">;
		result: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	}, {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	}>
]>;
export type StoredMessage = z.infer<typeof storedMessageValidator>;
export declare const requestOldChatMessagesValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"cr">;
	cursor: z.ZodString;
}, "strip", z.ZodTypeAny, {
	type: "cr";
	cursor: string;
	request_id?: string | undefined;
}, {
	type: "cr";
	cursor: string;
	request_id?: string | undefined;
}>;
export type RequestOldChatMessages = z.infer<typeof requestOldChatMessagesValidator>;
export declare const oldChatMessagesValidator: z.ZodObject<{
	request_id: z.ZodOptional<z.ZodString>;
	type: z.ZodLiteral<"co">;
	message: z.ZodArray<z.ZodUnion<[
		z.ZodObject<{
			message: z.ZodString;
			time: z.ZodString;
			id: z.ZodString;
			entity: z.ZodOptional<z.ZodString>;
			request_id: z.ZodOptional<z.ZodString>;
			sender: z.ZodString;
			updated: z.ZodOptional<z.ZodString>;
			for: z.ZodOptional<z.ZodString>;
			type: z.ZodLiteral<"c">;
		}, "strip", z.ZodTypeAny, {
			message: string;
			type: "c";
			time: string;
			id: string;
			sender: string;
			entity?: string | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
			for?: string | undefined;
		}, {
			message: string;
			type: "c";
			time: string;
			id: string;
			sender: string;
			entity?: string | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
			for?: string | undefined;
		}>,
		z.ZodObject<{
			message: z.ZodOptional<z.ZodString>;
			dice: z.ZodString;
			time: z.ZodString;
			id: z.ZodString;
			entity: z.ZodOptional<z.ZodString>;
			gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
			request_id: z.ZodOptional<z.ZodString>;
			sender: z.ZodString;
			updated: z.ZodOptional<z.ZodString>;
			type: z.ZodLiteral<"d">;
			result: z.ZodString;
		}, "strip", z.ZodTypeAny, {
			type: "d";
			dice: string;
			time: string;
			id: string;
			sender: string;
			result: string;
			message?: string | undefined;
			entity?: string | undefined;
			gm_only?: "t" | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
		}, {
			type: "d";
			dice: string;
			time: string;
			id: string;
			sender: string;
			result: string;
			message?: string | undefined;
			entity?: string | undefined;
			gm_only?: "t" | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
		}>
	]>, "many">;
	cursor: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	message: ({
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	} | {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	})[];
	type: "co";
	request_id?: string | undefined;
	cursor?: string | undefined;
}, {
	message: ({
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	} | {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	})[];
	type: "co";
	request_id?: string | undefined;
	cursor?: string | undefined;
}>;
export type OldChatMessages = z.infer<typeof oldChatMessagesValidator>;
export declare const campaignWSMessageValidator: z.ZodUnion<[
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"cs">;
		message: z.ZodString;
		entity: z.ZodOptional<z.ZodString>;
		for: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string;
		type: "cs";
		request_id?: string | undefined;
		entity?: string | undefined;
		for?: string | undefined;
	}, {
		message: string;
		type: "cs";
		request_id?: string | undefined;
		entity?: string | undefined;
		for?: string | undefined;
	}>,
	z.ZodObject<{
		message: z.ZodString;
		time: z.ZodString;
		id: z.ZodString;
		entity: z.ZodOptional<z.ZodString>;
		request_id: z.ZodOptional<z.ZodString>;
		sender: z.ZodString;
		updated: z.ZodOptional<z.ZodString>;
		for: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"c">;
	}, "strip", z.ZodTypeAny, {
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	}, {
		message: string;
		type: "c";
		time: string;
		id: string;
		sender: string;
		entity?: string | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
		for?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"cr">;
		cursor: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "cr";
		cursor: string;
		request_id?: string | undefined;
	}, {
		type: "cr";
		cursor: string;
		request_id?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"co">;
		message: z.ZodArray<z.ZodUnion<[
			z.ZodObject<{
				message: z.ZodString;
				time: z.ZodString;
				id: z.ZodString;
				entity: z.ZodOptional<z.ZodString>;
				request_id: z.ZodOptional<z.ZodString>;
				sender: z.ZodString;
				updated: z.ZodOptional<z.ZodString>;
				for: z.ZodOptional<z.ZodString>;
				type: z.ZodLiteral<"c">;
			}, "strip", z.ZodTypeAny, {
				message: string;
				type: "c";
				time: string;
				id: string;
				sender: string;
				entity?: string | undefined;
				request_id?: string | undefined;
				updated?: string | undefined;
				for?: string | undefined;
			}, {
				message: string;
				type: "c";
				time: string;
				id: string;
				sender: string;
				entity?: string | undefined;
				request_id?: string | undefined;
				updated?: string | undefined;
				for?: string | undefined;
			}>,
			z.ZodObject<{
				message: z.ZodOptional<z.ZodString>;
				dice: z.ZodString;
				time: z.ZodString;
				id: z.ZodString;
				entity: z.ZodOptional<z.ZodString>;
				gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
				request_id: z.ZodOptional<z.ZodString>;
				sender: z.ZodString;
				updated: z.ZodOptional<z.ZodString>;
				type: z.ZodLiteral<"d">;
				result: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				type: "d";
				dice: string;
				time: string;
				id: string;
				sender: string;
				result: string;
				message?: string | undefined;
				entity?: string | undefined;
				gm_only?: "t" | undefined;
				request_id?: string | undefined;
				updated?: string | undefined;
			}, {
				type: "d";
				dice: string;
				time: string;
				id: string;
				sender: string;
				result: string;
				message?: string | undefined;
				entity?: string | undefined;
				gm_only?: "t" | undefined;
				request_id?: string | undefined;
				updated?: string | undefined;
			}>
		]>, "many">;
		cursor: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: ({
			message: string;
			type: "c";
			time: string;
			id: string;
			sender: string;
			entity?: string | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
			for?: string | undefined;
		} | {
			type: "d";
			dice: string;
			time: string;
			id: string;
			sender: string;
			result: string;
			message?: string | undefined;
			entity?: string | undefined;
			gm_only?: "t" | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
		})[];
		type: "co";
		request_id?: string | undefined;
		cursor?: string | undefined;
	}, {
		message: ({
			message: string;
			type: "c";
			time: string;
			id: string;
			sender: string;
			entity?: string | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
			for?: string | undefined;
		} | {
			type: "d";
			dice: string;
			time: string;
			id: string;
			sender: string;
			result: string;
			message?: string | undefined;
			entity?: string | undefined;
			gm_only?: "t" | undefined;
			request_id?: string | undefined;
			updated?: string | undefined;
		})[];
		type: "co";
		request_id?: string | undefined;
		cursor?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"cru">;
		id: z.ZodString;
		message: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		message: string;
		type: "cru";
		id: string;
		request_id?: string | undefined;
	}, {
		message: string;
		type: "cru";
		id: string;
		request_id?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"cu">;
		id: z.ZodString;
		message: z.ZodString;
		updated: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		message: string;
		type: "cu";
		id: string;
		updated: string;
		request_id?: string | undefined;
	}, {
		message: string;
		type: "cu";
		id: string;
		updated: string;
		request_id?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"cd">;
		id: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "cd";
		id: string;
		request_id?: string | undefined;
	}, {
		type: "cd";
		id: string;
		request_id?: string | undefined;
	}>,
	z.ZodObject<{
		request_id: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"dr">;
		entity: z.ZodOptional<z.ZodString>;
		dice: z.ZodString;
		message: z.ZodOptional<z.ZodString>;
		gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
	}, "strip", z.ZodTypeAny, {
		type: "dr";
		dice: string;
		request_id?: string | undefined;
		entity?: string | undefined;
		message?: string | undefined;
		gm_only?: "t" | undefined;
	}, {
		type: "dr";
		dice: string;
		request_id?: string | undefined;
		entity?: string | undefined;
		message?: string | undefined;
		gm_only?: "t" | undefined;
	}>,
	z.ZodObject<{
		message: z.ZodOptional<z.ZodString>;
		dice: z.ZodString;
		time: z.ZodString;
		id: z.ZodString;
		entity: z.ZodOptional<z.ZodString>;
		gm_only: z.ZodOptional<z.ZodLiteral<"t">>;
		request_id: z.ZodOptional<z.ZodString>;
		sender: z.ZodString;
		updated: z.ZodOptional<z.ZodString>;
		type: z.ZodLiteral<"d">;
		result: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	}, {
		type: "d";
		dice: string;
		time: string;
		id: string;
		sender: string;
		result: string;
		message?: string | undefined;
		entity?: string | undefined;
		gm_only?: "t" | undefined;
		request_id?: string | undefined;
		updated?: string | undefined;
	}>
]>;
export type CampaignWSMessage = z.infer<typeof campaignWSMessageValidator>;
export declare enum DamageType {
	PHYSICAL = "physical",
	MAGICAL = "magical",
	GALVANIC = "galvanic",
	PIERCING = "piercing",
	SLASHING = "slashing",
	BLUDGEONING = "bludgeoning",
	VIM = "vim",
	BURN = "burn",
	BLEED = "bleed",
	STUN = "stun",
	PARALYSIS = "paralysis",
	ATTRIBUTE = "attribute",
	FALL = "fall"
}
export declare const NORMAL_DAMAGES: DamageType[];
export declare const PHYSICAL_SUB_DAMAGES: DamageType[];
export interface AttackDamage {
	damage: number;
	type: DamageType;
	attribute?: EntityAttribute;
}
export interface AttackDetails {
	accuracy: number;
	damages: AttackDamage[];
	numberOfAttacks?: number;
}
export interface AttackResponse {
	alerts: number;
	dodge?: boolean;
	block?: boolean;
	inHolyShield?: boolean;
	hasShieldBlock?: boolean;
	hasImprovedShieldBlock?: boolean;
	hasEnhancedBlock?: boolean;
	hasShieldMaster?: boolean;
	hasDiamondBlock?: boolean;
	hasNotAScratch?: boolean;
}
export declare const WEAPON_TYPES_KEY = "VENNT_WEAPON_TYPES";
export declare const SHOP_ITEMS_KEY = "VENNT_SHOP_ITEMS";
export declare const ABILITIES_KEY = "VENNT_ABILITIES";
export declare const ABILITIES_KEY_OLD = "VENNT_ABILITIES_0.13.7";
export declare const jsonStorageKeyValidator: z.ZodEnum<[
	"VENNT_WEAPON_TYPES",
	"VENNT_SHOP_ITEMS",
	"VENNT_ABILITIES",
	"VENNT_ABILITIES_0.13.7"
]>;
export declare const pathDetailsValidator: z.ZodObject<{
	name: z.ZodString;
	url: z.ZodString;
	desc: z.ZodString;
	reqs: z.ZodOptional<z.ZodString>;
	completionBonus: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	name: string;
	url: string;
	desc: string;
	reqs?: string | undefined;
	completionBonus?: string | undefined;
}, {
	name: string;
	url: string;
	desc: string;
	reqs?: string | undefined;
	completionBonus?: string | undefined;
}>;
export declare const pathsAndAbilitiesValidator: z.ZodObject<{
	paths: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		url: z.ZodString;
		desc: z.ZodString;
		reqs: z.ZodOptional<z.ZodString>;
		completionBonus: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		name: string;
		url: string;
		desc: string;
		reqs?: string | undefined;
		completionBonus?: string | undefined;
	}, {
		name: string;
		url: string;
		desc: string;
		reqs?: string | undefined;
		completionBonus?: string | undefined;
	}>, "many">;
	abilities: z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		effect: z.ZodString;
		custom_fields: z.ZodNullable<z.ZodOptional<z.ZodObject<{
			path: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			activation: z.ZodOptional<z.ZodString>;
			expedited: z.ZodOptional<z.ZodString>;
			flavor: z.ZodOptional<z.ZodString>;
			purchase: z.ZodOptional<z.ZodString>;
			unlocks: z.ZodOptional<z.ZodString>;
			partial_unlocks: z.ZodOptional<z.ZodString>;
			prereq: z.ZodOptional<z.ZodString>;
			build_dc: z.ZodOptional<z.ZodString>;
			build_time: z.ZodOptional<z.ZodString>;
			cost: z.ZodOptional<z.ZodObject<{
				hp: z.ZodOptional<z.ZodNumber>;
				mp: z.ZodOptional<z.ZodNumber>;
				vim: z.ZodOptional<z.ZodNumber>;
				hero: z.ZodOptional<z.ZodNumber>;
				actions: z.ZodOptional<z.ZodNumber>;
				reactions: z.ZodOptional<z.ZodNumber>;
				attack: z.ZodOptional<z.ZodBoolean>;
				passive: z.ZodOptional<z.ZodBoolean>;
				respite: z.ZodOptional<z.ZodBoolean>;
				rest: z.ZodOptional<z.ZodBoolean>;
				intermission: z.ZodOptional<z.ZodBoolean>;
			}, "strip", z.ZodTypeAny, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}, {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			}>>;
			mp_cost: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			cast_dl: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
			not_req: z.ZodOptional<z.ZodBoolean>;
			repeatable: z.ZodOptional<z.ZodBoolean>;
			times_taken: z.ZodOptional<z.ZodNumber>;
			keys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
			stars: z.ZodOptional<z.ZodNumber>;
			highlight: z.ZodOptional<z.ZodEnum<[
				"red",
				"dark_red",
				"orange",
				"dark_orange",
				"green",
				"dark_green",
				"blue",
				"dark_blue",
				"gray",
				"dark_gray"
			]>>;
		}, "strip", z.ZodTypeAny, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}, {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		}>>>;
		uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
			roll: z.ZodOptional<z.ZodObject<{
				dice: z.ZodString;
				attr: z.ZodString;
				heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
			}, "strip", z.ZodTypeAny, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}, {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			}>>;
			heal: z.ZodOptional<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
			}, {
				attr: Record<string, string | number>;
			}>>;
			optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
				attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}, {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}>, "many">>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
			expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
			inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
				z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"text">;
				}, "strip", z.ZodTypeAny, {
					type: "text";
					key: string;
					label?: string | undefined;
				}, {
					type: "text";
					key: string;
					label?: string | undefined;
				}>,
				z.ZodObject<{
					label: z.ZodOptional<z.ZodString>;
					key: z.ZodString;
					type: z.ZodLiteral<"number">;
					min: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					max: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					default: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
				}, "strip", z.ZodTypeAny, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}, {
					type: "number";
					key: string;
					label?: string | undefined;
					min?: string | number | undefined;
					max?: string | number | undefined;
					default?: string | number | undefined;
				}>
			]>, "many">>;
			criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
				criteria: z.ZodUnion<[
					z.ZodObject<{
						type: z.ZodLiteral<"comp">;
						left: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						right: z.ZodUnion<[
							z.ZodObject<{
								type: z.ZodLiteral<"attr">;
								attr: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "attr";
								attr: string;
							}, {
								type: "attr";
								attr: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"ability_field">;
								path: z.ZodArray<z.ZodString, "many">;
							}, "strip", z.ZodTypeAny, {
								path: string[];
								type: "ability_field";
							}, {
								path: string[];
								type: "ability_field";
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"key">;
								key: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "key";
								key: string;
							}, {
								type: "key";
								key: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"const">;
								const: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "const";
								const: string;
							}, {
								type: "const";
								const: string;
							}>,
							z.ZodObject<{
								type: z.ZodLiteral<"equation">;
								equation: z.ZodString;
							}, "strip", z.ZodTypeAny, {
								type: "equation";
								equation: string;
							}, {
								type: "equation";
								equation: string;
							}>
						]>;
						operator: z.ZodEnum<[
							"equals",
							"gte",
							"gt",
							"lte",
							"lt"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}, {
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					}>,
					z.ZodObject<{
						type: z.ZodLiteral<"special">;
						name: z.ZodEnum<[
							"isSpell"
						]>;
					}, "strip", z.ZodTypeAny, {
						type: "special";
						name: "isSpell";
					}, {
						type: "special";
						name: "isSpell";
					}>,
					z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
				]>;
				adjust: z.ZodOptional<z.ZodObject<{
					time: z.ZodEnum<[
						"turn",
						"encounter",
						"rest",
						"permanent"
					]>;
					attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>>;
					dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>>;
					order: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}, {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				}>>;
				adjust_ability_cost: z.ZodOptional<z.ZodObject<{
					adjust_cost: z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>;
				}, "strip", z.ZodTypeAny, {
					adjust_cost: string | number;
				}, {
					adjust_cost: string | number;
				}>>;
				check: z.ZodOptional<z.ZodObject<{
					bonus: z.ZodOptional<z.ZodString>;
					attr: z.ZodString;
					dice_settings: z.ZodOptional<z.ZodObject<{
						explodes: z.ZodOptional<z.ZodBoolean>;
						rr1s: z.ZodOptional<z.ZodBoolean>;
						drop: z.ZodOptional<z.ZodNumber>;
						fatigued: z.ZodOptional<z.ZodBoolean>;
						end: z.ZodOptional<z.ZodString>;
						flow: z.ZodOptional<z.ZodNumber>;
						ebb: z.ZodOptional<z.ZodNumber>;
						heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
						otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
							toggled: z.ZodBoolean;
						}, "strip", z.ZodTypeAny, {
							toggled: boolean;
						}, {
							toggled: boolean;
						}>>>;
						adjust: z.ZodOptional<z.ZodUnion<[
							z.ZodNumber,
							z.ZodString
						]>>;
						count: z.ZodOptional<z.ZodNumber>;
						sides: z.ZodOptional<z.ZodNumber>;
					}, "strip", z.ZodTypeAny, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}>>;
					label: z.ZodOptional<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}, {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				}>>;
			}, "strip", z.ZodTypeAny, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}, {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}>, "many">>;
			weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
				dmg: z.ZodOptional<z.ZodString>;
				attr: z.ZodOptional<z.ZodString>;
				category: z.ZodOptional<z.ZodString>;
				courses: z.ZodOptional<z.ZodString>;
				range: z.ZodOptional<z.ZodString>;
				special: z.ZodOptional<z.ZodString>;
				weapon_type: z.ZodOptional<z.ZodString>;
				dc_cost: z.ZodOptional<z.ZodNumber>;
				in_storage: z.ZodOptional<z.ZodBoolean>;
				not_evadable: z.ZodOptional<z.ZodBoolean>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}, {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}>, "many">>;
			hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
		}, "strip", z.ZodTypeAny, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}, {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		}>>>>;
		comment: z.ZodNullable<z.ZodOptional<z.ZodString>>;
		active: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}, {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: {
			roll?: {
				dice: string;
				attr: string;
				heal?: Record<string, string | number> | undefined;
			} | undefined;
			heal?: {
				attr: Record<string, string | number>;
			} | undefined;
			optional_heal?: {
				attr: Record<string, string | number>;
				label?: string | undefined;
			}[] | undefined;
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
			expose_combat_stats?: string[] | undefined;
			inputs?: (UseRadioInput | {
				type: "text";
				key: string;
				label?: string | undefined;
			} | {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			})[] | undefined;
			criteria_benefits?: {
				criteria: {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | ({
					type: "base";
					operator: "every" | "some";
				} & {
					tests: ({
						type: "comp";
						left: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						right: {
							type: "attr";
							attr: string;
						} | {
							path: string[];
							type: "ability_field";
						} | {
							type: "key";
							key: string;
						} | {
							type: "const";
							const: string;
						} | {
							type: "equation";
							equation: string;
						};
						operator: "equals" | "gte" | "gt" | "lte" | "lt";
					} | {
						type: "special";
						name: "isSpell";
					} | UseCriteriaBase)[];
				});
				adjust?: {
					time: "turn" | "encounter" | "rest" | "permanent";
					attr?: Record<string, string | number> | undefined;
					dice?: Record<string, {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					}> | undefined;
					order?: number | undefined;
				} | undefined;
				adjust_ability_cost?: {
					adjust_cost: string | number;
				} | undefined;
				check?: {
					attr: string;
					bonus?: string | undefined;
					dice_settings?: {
						explodes?: boolean | undefined;
						rr1s?: boolean | undefined;
						drop?: number | undefined;
						fatigued?: boolean | undefined;
						end?: string | undefined;
						flow?: number | undefined;
						ebb?: number | undefined;
						heroic_creativity_bonus?: number | undefined;
						otherToggles?: Record<string, {
							toggled: boolean;
						}> | undefined;
						adjust?: string | number | undefined;
						count?: number | undefined;
						sides?: number | undefined;
					} | undefined;
					label?: string | undefined;
				} | undefined;
			}[] | undefined;
			weapons?: {
				dmg?: string | undefined;
				attr?: string | undefined;
				category?: string | undefined;
				courses?: string | undefined;
				range?: string | undefined;
				special?: string | undefined;
				weapon_type?: string | undefined;
				dc_cost?: number | undefined;
				in_storage?: boolean | undefined;
				not_evadable?: boolean | undefined;
				label?: string | undefined;
			}[] | undefined;
			hide_default_use_button?: boolean | undefined;
		} | null | undefined;
		comment?: string | null | undefined;
	}[];
	paths: {
		name: string;
		url: string;
		desc: string;
		reqs?: string | undefined;
		completionBonus?: string | undefined;
	}[];
}, {
	abilities: {
		name: string;
		effect: string;
		active: boolean;
		custom_fields?: {
			path?: string | undefined;
			range?: string | undefined;
			activation?: string | undefined;
			expedited?: string | undefined;
			flavor?: string | undefined;
			purchase?: string | undefined;
			unlocks?: string | undefined;
			partial_unlocks?: string | undefined;
			prereq?: string | undefined;
			build_dc?: string | undefined;
			build_time?: string | undefined;
			cost?: {
				hp?: number | undefined;
				mp?: number | undefined;
				vim?: number | undefined;
				hero?: number | undefined;
				actions?: number | undefined;
				reactions?: number | undefined;
				attack?: boolean | undefined;
				passive?: boolean | undefined;
				respite?: boolean | undefined;
				rest?: boolean | undefined;
				intermission?: boolean | undefined;
			} | undefined;
			mp_cost?: number[] | undefined;
			cast_dl?: number[] | undefined;
			not_req?: boolean | undefined;
			repeatable?: boolean | undefined;
			times_taken?: number | undefined;
			keys?: Record<string, string> | undefined;
			stars?: number | undefined;
			highlight?: "red" | "dark_red" | "orange" | "dark_orange" | "green" | "dark_green" | "blue" | "dark_blue" | "gray" | "dark_gray" | undefined;
		} | null | undefined;
		uses?: unknown;
		comment?: string | null | undefined;
	}[];
	paths: {
		name: string;
		url: string;
		desc: string;
		reqs?: string | undefined;
		completionBonus?: string | undefined;
	}[];
}>;
export declare const shopItemValidator: z.ZodObject<{
	dmg: z.ZodOptional<z.ZodString>;
	attr: z.ZodOptional<z.ZodString>;
	category: z.ZodOptional<z.ZodString>;
	courses: z.ZodOptional<z.ZodString>;
	range: z.ZodOptional<z.ZodString>;
	special: z.ZodOptional<z.ZodString>;
	weapon_type: z.ZodOptional<z.ZodString>;
	dc_cost: z.ZodOptional<z.ZodNumber>;
	in_storage: z.ZodOptional<z.ZodBoolean>;
	not_evadable: z.ZodOptional<z.ZodBoolean>;
	name: z.ZodOptional<z.ZodString>;
	bulk: z.ZodNumber;
	desc: z.ZodString;
	type: z.ZodEnum<[
		"equipment",
		"consumable",
		"container",
		"armor",
		"shield",
		"weapon"
	]>;
	cost: z.ZodString;
	sp: z.ZodOptional<z.ZodNumber>;
	section: z.ZodOptional<z.ZodString>;
	examples: z.ZodOptional<z.ZodString>;
	uses: z.ZodCatch<z.ZodNullable<z.ZodOptional<z.ZodObject<{
		roll: z.ZodOptional<z.ZodObject<{
			dice: z.ZodString;
			attr: z.ZodString;
			heal: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
		}, "strip", z.ZodTypeAny, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}, {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		}>>;
		heal: z.ZodOptional<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
		}, {
			attr: Record<string, string | number>;
		}>>;
		optional_heal: z.ZodOptional<z.ZodArray<z.ZodObject<{
			attr: z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}, {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}>, "many">>;
		adjust: z.ZodOptional<z.ZodObject<{
			time: z.ZodEnum<[
				"turn",
				"encounter",
				"rest",
				"permanent"
			]>;
			attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>>>;
			dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>>;
			order: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}, {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		}>>;
		adjust_ability_cost: z.ZodOptional<z.ZodObject<{
			adjust_cost: z.ZodUnion<[
				z.ZodNumber,
				z.ZodString
			]>;
		}, "strip", z.ZodTypeAny, {
			adjust_cost: string | number;
		}, {
			adjust_cost: string | number;
		}>>;
		check: z.ZodOptional<z.ZodObject<{
			bonus: z.ZodOptional<z.ZodString>;
			attr: z.ZodString;
			dice_settings: z.ZodOptional<z.ZodObject<{
				explodes: z.ZodOptional<z.ZodBoolean>;
				rr1s: z.ZodOptional<z.ZodBoolean>;
				drop: z.ZodOptional<z.ZodNumber>;
				fatigued: z.ZodOptional<z.ZodBoolean>;
				end: z.ZodOptional<z.ZodString>;
				flow: z.ZodOptional<z.ZodNumber>;
				ebb: z.ZodOptional<z.ZodNumber>;
				heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
				otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					toggled: z.ZodBoolean;
				}, "strip", z.ZodTypeAny, {
					toggled: boolean;
				}, {
					toggled: boolean;
				}>>>;
				adjust: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				count: z.ZodOptional<z.ZodNumber>;
				sides: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}>>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}, {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		}>>;
		expose_combat_stats: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		inputs: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodType<UseRadioInput, z.ZodTypeDef, UseRadioInput>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"text">;
			}, "strip", z.ZodTypeAny, {
				type: "text";
				key: string;
				label?: string | undefined;
			}, {
				type: "text";
				key: string;
				label?: string | undefined;
			}>,
			z.ZodObject<{
				label: z.ZodOptional<z.ZodString>;
				key: z.ZodString;
				type: z.ZodLiteral<"number">;
				min: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				max: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
				default: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>;
			}, "strip", z.ZodTypeAny, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}, {
				type: "number";
				key: string;
				label?: string | undefined;
				min?: string | number | undefined;
				max?: string | number | undefined;
				default?: string | number | undefined;
			}>
		]>, "many">>;
		criteria_benefits: z.ZodOptional<z.ZodArray<z.ZodObject<{
			criteria: z.ZodUnion<[
				z.ZodObject<{
					type: z.ZodLiteral<"comp">;
					left: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					right: z.ZodUnion<[
						z.ZodObject<{
							type: z.ZodLiteral<"attr">;
							attr: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "attr";
							attr: string;
						}, {
							type: "attr";
							attr: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"ability_field">;
							path: z.ZodArray<z.ZodString, "many">;
						}, "strip", z.ZodTypeAny, {
							path: string[];
							type: "ability_field";
						}, {
							path: string[];
							type: "ability_field";
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"key">;
							key: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "key";
							key: string;
						}, {
							type: "key";
							key: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"const">;
							const: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "const";
							const: string;
						}, {
							type: "const";
							const: string;
						}>,
						z.ZodObject<{
							type: z.ZodLiteral<"equation">;
							equation: z.ZodString;
						}, "strip", z.ZodTypeAny, {
							type: "equation";
							equation: string;
						}, {
							type: "equation";
							equation: string;
						}>
					]>;
					operator: z.ZodEnum<[
						"equals",
						"gte",
						"gt",
						"lte",
						"lt"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}, {
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				}>,
				z.ZodObject<{
					type: z.ZodLiteral<"special">;
					name: z.ZodEnum<[
						"isSpell"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "special";
					name: "isSpell";
				}, {
					type: "special";
					name: "isSpell";
				}>,
				z.ZodType<UseCriteriaBase, z.ZodTypeDef, UseCriteriaBase>
			]>;
			adjust: z.ZodOptional<z.ZodObject<{
				time: z.ZodEnum<[
					"turn",
					"encounter",
					"rest",
					"permanent"
				]>;
				attr: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>>>;
				dice: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>>;
				order: z.ZodOptional<z.ZodNumber>;
			}, "strip", z.ZodTypeAny, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}, {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			}>>;
			adjust_ability_cost: z.ZodOptional<z.ZodObject<{
				adjust_cost: z.ZodUnion<[
					z.ZodNumber,
					z.ZodString
				]>;
			}, "strip", z.ZodTypeAny, {
				adjust_cost: string | number;
			}, {
				adjust_cost: string | number;
			}>>;
			check: z.ZodOptional<z.ZodObject<{
				bonus: z.ZodOptional<z.ZodString>;
				attr: z.ZodString;
				dice_settings: z.ZodOptional<z.ZodObject<{
					explodes: z.ZodOptional<z.ZodBoolean>;
					rr1s: z.ZodOptional<z.ZodBoolean>;
					drop: z.ZodOptional<z.ZodNumber>;
					fatigued: z.ZodOptional<z.ZodBoolean>;
					end: z.ZodOptional<z.ZodString>;
					flow: z.ZodOptional<z.ZodNumber>;
					ebb: z.ZodOptional<z.ZodNumber>;
					heroic_creativity_bonus: z.ZodOptional<z.ZodNumber>;
					otherToggles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
						toggled: z.ZodBoolean;
					}, "strip", z.ZodTypeAny, {
						toggled: boolean;
					}, {
						toggled: boolean;
					}>>>;
					adjust: z.ZodOptional<z.ZodUnion<[
						z.ZodNumber,
						z.ZodString
					]>>;
					count: z.ZodOptional<z.ZodNumber>;
					sides: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}>>;
				label: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}, {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			}>>;
		}, "strip", z.ZodTypeAny, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}, {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}>, "many">>;
		weapons: z.ZodOptional<z.ZodArray<z.ZodObject<{
			dmg: z.ZodOptional<z.ZodString>;
			attr: z.ZodOptional<z.ZodString>;
			category: z.ZodOptional<z.ZodString>;
			courses: z.ZodOptional<z.ZodString>;
			range: z.ZodOptional<z.ZodString>;
			special: z.ZodOptional<z.ZodString>;
			weapon_type: z.ZodOptional<z.ZodString>;
			dc_cost: z.ZodOptional<z.ZodNumber>;
			in_storage: z.ZodOptional<z.ZodBoolean>;
			not_evadable: z.ZodOptional<z.ZodBoolean>;
			label: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}, {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}>, "many">>;
		hide_default_use_button: z.ZodOptional<z.ZodBoolean>;
	}, "strip", z.ZodTypeAny, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}, {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	}>>>>;
}, "strip", z.ZodTypeAny, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	cost: string;
	bulk: number;
	desc: string;
	dmg?: string | undefined;
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
	name?: string | undefined;
	sp?: number | undefined;
	section?: string | undefined;
	examples?: string | undefined;
	uses?: {
		roll?: {
			dice: string;
			attr: string;
			heal?: Record<string, string | number> | undefined;
		} | undefined;
		heal?: {
			attr: Record<string, string | number>;
		} | undefined;
		optional_heal?: {
			attr: Record<string, string | number>;
			label?: string | undefined;
		}[] | undefined;
		adjust?: {
			time: "turn" | "encounter" | "rest" | "permanent";
			attr?: Record<string, string | number> | undefined;
			dice?: Record<string, {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			}> | undefined;
			order?: number | undefined;
		} | undefined;
		adjust_ability_cost?: {
			adjust_cost: string | number;
		} | undefined;
		check?: {
			attr: string;
			bonus?: string | undefined;
			dice_settings?: {
				explodes?: boolean | undefined;
				rr1s?: boolean | undefined;
				drop?: number | undefined;
				fatigued?: boolean | undefined;
				end?: string | undefined;
				flow?: number | undefined;
				ebb?: number | undefined;
				heroic_creativity_bonus?: number | undefined;
				otherToggles?: Record<string, {
					toggled: boolean;
				}> | undefined;
				adjust?: string | number | undefined;
				count?: number | undefined;
				sides?: number | undefined;
			} | undefined;
			label?: string | undefined;
		} | undefined;
		expose_combat_stats?: string[] | undefined;
		inputs?: (UseRadioInput | {
			type: "text";
			key: string;
			label?: string | undefined;
		} | {
			type: "number";
			key: string;
			label?: string | undefined;
			min?: string | number | undefined;
			max?: string | number | undefined;
			default?: string | number | undefined;
		})[] | undefined;
		criteria_benefits?: {
			criteria: {
				type: "comp";
				left: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				right: {
					type: "attr";
					attr: string;
				} | {
					path: string[];
					type: "ability_field";
				} | {
					type: "key";
					key: string;
				} | {
					type: "const";
					const: string;
				} | {
					type: "equation";
					equation: string;
				};
				operator: "equals" | "gte" | "gt" | "lte" | "lt";
			} | {
				type: "special";
				name: "isSpell";
			} | ({
				type: "base";
				operator: "every" | "some";
			} & {
				tests: ({
					type: "comp";
					left: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					right: {
						type: "attr";
						attr: string;
					} | {
						path: string[];
						type: "ability_field";
					} | {
						type: "key";
						key: string;
					} | {
						type: "const";
						const: string;
					} | {
						type: "equation";
						equation: string;
					};
					operator: "equals" | "gte" | "gt" | "lte" | "lt";
				} | {
					type: "special";
					name: "isSpell";
				} | UseCriteriaBase)[];
			});
			adjust?: {
				time: "turn" | "encounter" | "rest" | "permanent";
				attr?: Record<string, string | number> | undefined;
				dice?: Record<string, {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				}> | undefined;
				order?: number | undefined;
			} | undefined;
			adjust_ability_cost?: {
				adjust_cost: string | number;
			} | undefined;
			check?: {
				attr: string;
				bonus?: string | undefined;
				dice_settings?: {
					explodes?: boolean | undefined;
					rr1s?: boolean | undefined;
					drop?: number | undefined;
					fatigued?: boolean | undefined;
					end?: string | undefined;
					flow?: number | undefined;
					ebb?: number | undefined;
					heroic_creativity_bonus?: number | undefined;
					otherToggles?: Record<string, {
						toggled: boolean;
					}> | undefined;
					adjust?: string | number | undefined;
					count?: number | undefined;
					sides?: number | undefined;
				} | undefined;
				label?: string | undefined;
			} | undefined;
		}[] | undefined;
		weapons?: {
			dmg?: string | undefined;
			attr?: string | undefined;
			category?: string | undefined;
			courses?: string | undefined;
			range?: string | undefined;
			special?: string | undefined;
			weapon_type?: string | undefined;
			dc_cost?: number | undefined;
			in_storage?: boolean | undefined;
			not_evadable?: boolean | undefined;
			label?: string | undefined;
		}[] | undefined;
		hide_default_use_button?: boolean | undefined;
	} | null | undefined;
}, {
	type: "armor" | "shield" | "equipment" | "consumable" | "container" | "weapon";
	cost: string;
	bulk: number;
	desc: string;
	dmg?: string | undefined;
	attr?: string | undefined;
	category?: string | undefined;
	courses?: string | undefined;
	range?: string | undefined;
	special?: string | undefined;
	weapon_type?: string | undefined;
	dc_cost?: number | undefined;
	in_storage?: boolean | undefined;
	not_evadable?: boolean | undefined;
	name?: string | undefined;
	sp?: number | undefined;
	section?: string | undefined;
	examples?: string | undefined;
	uses?: unknown;
}>;
export type JsonStorageKey = z.infer<typeof jsonStorageKeyValidator>;
export type ShopItem = z.infer<typeof shopItemValidator>;
export type PathDetails = z.infer<typeof pathDetailsValidator>;
export type PathsAndAbilities = z.infer<typeof pathsAndAbilitiesValidator>;
export type SuccessResult<T> = {
	success: true;
	result: T;
};
export type ErrorResult = {
	success: false;
	error: string;
	code: number;
};
export type Result<T> = SuccessResult<T> | ErrorResult;
export type HTMLString = string;
export type SaveState = "EDITING" | "SAVING" | "SAVED";
export type UpdatedEntityAttribute = {
	base?: number;
	val: number;
	reason?: string[];
	items?: EntityItem[];
	abilities?: EntityAbility[];
	dice?: DiceSettings;
};
export type UpdatedEntityAttributes = Partial<Record<string, UpdatedEntityAttribute>>;
export type DiceToggle = {
	attr?: EntityAttribute;
	setting: DiceSettings;
	default?: boolean;
	label?: string;
	src?: {
		ability_id?: string;
		item_id?: string;
	};
};
export type DiceToggles = {
	[key: string]: DiceToggle;
};
export type DiceCommands = {
	discord: string;
	roll20: string;
	web: string;
	settings: DiceSettings;
};
export type ConsolidatedItem = FullEntityItem & {
	ids: string[];
};
export type PathTree = Record<string, {
	children: PathTree;
	abilities: string[];
}>;
export declare const LEVEL_UPS_TO_INCREASE_ATTR = 2;
export declare const DEFAULT_ATTRS_MAP: Record<EntityAttribute, number>;
export interface AttrAdjustment {
	attr: EntityAttribute;
	eq: Equation;
}
export declare const DEFAULT_ADJUSTMENTS: AttrAdjustment[];
export declare const DEFAULT_CHARACTER_ADJUSTMENTS: AttrAdjustment[];
export declare const abilityExtendEntityAttributes: (ability: EntityAbility, attrs: ComputedAttributes) => ComputedAttributes;
export declare const ATTRIBUTE_DAMAGES: string[];
export declare const MIN_ZEROS: Set<string>;
export declare const getMaxAttr: (attr: EntityAttribute) => EntityAttribute | undefined;
export declare const getBaseAttr: (attr: EntityAttribute) => EntityAttribute | undefined;
export declare const attrFullName: (attr: EntityAttribute) => string;
export declare const attrShortName: (attr: EntityAttribute) => string;
export declare const ORDER_PRE_ATTR = 10;
export declare const ORDER_ATTR = 20;
export declare const ORDER_XP = 30;
export declare const ORDER_BASE_COMBAT_STAT = 40;
export declare const ORDER_ARMOR = 50;
export declare const ORDER_COMBAT_STAT = 60;
export declare const ORDER_CUSTOM_ATTR = 1000;
export declare const ORDER_LAST = 10000;
export declare const computeAttributes: (entity: CollectedEntity) => ComputedAttributes;
export declare const abilityPassCriteriaCheck: (criteria: UseCriteria, usesAbility: EntityAbility, checkAbility: EntityAbility | null, attrs: ComputedAttributes) => boolean;
export declare const buildSettingsForAttrList: (baseSettings: DiceSettings, relatedAttrs: EntityAttribute[], attrs: ComputedAttributes) => DiceSettings;
export declare const combineEnabledTogglesSettings: (settings: DiceSettings, diceToggles: DiceToggles, attrs: ComputedAttributes, relevantAttrs: EntityAttribute[], skipKey?: string) => DiceSettings;
export declare const combineDiceSettings: (baseSettings: DiceSettings, newSettings: DiceSettings, attrs: ComputedAttributes) => DiceSettings;
export declare const buildDice: (count: number, sides: number, adjust?: number | string, settings?: DiceSettings, comment?: string) => DiceCommands;
export declare const defaultDice: (attrs: ComputedAttributes, attr: EntityAttribute, givenSettings?: DiceSettings, diceToggles?: DiceToggles, comment?: string, skipKey?: string) => DiceCommands;
export declare const diceParseFromString: (diceStr: string, givenSettings?: DiceSettings, comment?: string, diceToggles?: DiceToggles, attrs?: ComputedAttributes, relevantAttrs?: EntityAttribute[]) => DiceCommands | undefined;
export declare const diceTogglesForEntity: (entity: CollectedEntity, attrs: ComputedAttributes) => DiceToggles;
export declare const skimDownAbility: (ability: EntityAbility) => EntityAbility;
export declare const skimDownItem: (item: EntityItem) => EntityItem;
/**
 * Removes all potentially long runs of text from the entity
 * @param entity
 * @returns Skimmed-down entity.
 */
export declare const skimDownEntity: (entity: CollectedEntity) => CollectedEntity;
export declare const attrsRegexStr: (attrs: ComputedAttributes) => string;
export declare const replaceVariablesInEquation: (equation: string, attrs: ComputedAttributes) => {
	cleanedEquation: string;
	details: {
		ceilResult: boolean;
	};
};
export declare const solveEquation: (equation: string, attrs: ComputedAttributes) => number | undefined;
export declare const solvePendingEquations: (usesMap: UseAttrMap, attrs: ComputedAttributes) => PartialEntityAttributes;
export declare const titleText: (text: string) => string;

export {};
